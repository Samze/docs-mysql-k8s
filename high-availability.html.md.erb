---
title: Configuring High-Availability MySQL Instances
---

This topic describes how to create high availability for <%= vars.product_full %>.


##<a id='overview'></a>Overview

High availability (HA) MySQL instances offer automatic failover, ensuring that app requests operate continuously
and without extended downtime.

For more information about high availability including an architecture diagram,
see [Architecture of an HA MySQL Instance](architecture.html#ha-diagram)
in _Architecture_.

###<a id='planning'></a>About Planning for Long-Lived HA MySQL Instances

HA MySQL instances are often used in production environments.
Before creating an HA MySQL instance that you intend to rely on for a long time,
carefully consider the resource requests and limits.

If you do not designate resource requests and limits, then Kubernetes
schedules pods onto node resources according to “best effort” policies.
If resources become constrained, your Pods running MySQL risk eviction
as Kubernetes manages resources allocation among its Pods.
For information about the properties used to set limits and requests,
see [Property Reference for the MySQL Resource](property-reference-mysql.html).

###<a id='node-selectionr'></a>About Explicit Node Selection and Anti-Affinity


[//]: # ( What does this mean? As a developer when do I need to know it and how does it affect my actions?)

<%= vars.product_full %> does not support explicit node selection and anti-affinity for controlling Pod assignment
to Kubernetes nodes.
Kubernetes distributes Pods per to its regular placement and scheduling policies including any resource requests.

###<a id='scale-up'></a>Scale Up Is Easy, Scale Down Is Hard

You can convert a single-node MySQL instance to an HA MySQL instance with a single command.
See [Convert a Single-Node MySQL Instance to an HA MySQL Instance](#convert-to-ha) below.

However, it is not straightforward to convert an HA MySQL instance to a single-node MySQL instance.
To move from an HA MySQL instance to a single-node instance,
you must take a backup of the database and restore it to a new single-node instance.
See [Move an HA MySQL Instance to a Single-Node MySQL Instance](#ha-to-sn) below.

### <a id='about-backups'></a> About Backing Up

HA MySQL instances are backed up and restored the same way as single-node instances. 
Backups from HA MySQL instances are created from the primary MySQL Pod.
Backups from HA MySQL instances can be restored either to single-node or HA MySQL instances.
For information about backup and restore,
see [Backing Up and Restoring MySQL Instances](backup-restore.html).



## <a id='prerequisites'></a> Prerequisites

Before you can configure high availability, you must have:

<%= partial '/prerequisites' %>

* **Know how to create and delete single-node MySQL instances:**
  See [Creating and Deleting MySQL Instances](create-delete-mysql.html).

## <a id="create-ha"></a>Create an HA MySQL Instance

Creating an HA MySQL instance is very similar to creating a single-node MySQL instance. 
By default, MySQL instances are single node. 

For HA MySQL instances, configure high availability to be true as described below:
 

1. Follow the steps 1–4 in [Create a MySQL Instance](create-delete-mysql.html#create-instance).

2. Edit your uniquely named copy of `mysql.yaml`:

    1. Set the value of `highAvailability.enabled` to `true`:

        ```
        ---
        apiVersion: with.sql.tanzu.vmware.com/v1
        kind: MySQL
        metadata:
          name: mysql-ha-sample
        spec:
          storageSize: 1Gi
          imagePullSecret: tanzu-mysql-image-registry
          highAvailability:
            enabled: true
        ```

    2. Edit the other properties for the instance as needed.
         For information about the properties that you can set for the MySQL resource,
         see [Property Reference for the MySQL Resource](property-reference-mysql.html).

1. Create and verify the instance by following steps 6 and 7
   in [Create a MySQL Instance](create-delete-mysql.html#create-instance).


## <a id="convert-to-ha"></a>Convert a Single-Node MySQL Instance to an HA MySQL Instance

<p class="note">
   <strong>Note:</strong>
Be sure that you want an HA instance before following this procedure.
You cannot easily change an HA MySQL instance back to a single-node one.
</p>

To change a single-node MySQL instance into an HA MySQL Instance:

1.  See [Updating MySQL Instances](update-instance.html).

## <a id="inspect-instance"></a>Inspect an HA MySQL Instance

After you have created your HA MySQL instance, you can inspect the instance to 
confirm that all the Pods are running.

This inspection procedure can be also be used for troubleshooting. 


1. Connect to a Pod, by running: 

    ```
    kubectl exec -it POD-NAME --container=mysql -- bash
    ```
    Where is `POD-NAME` is the name of the primary Pod or one of the secondary Pods.
    The Pod name is the instance name defined in the copy of the `mysql.yaml` file appended with an index, 0–2.
    When the Pod is first created, the index for the primary Pod is `-0`.

    For example:

    <pre class="terminal">$ kubectl exec -it mysql-ha-sample-0 --container=mysql -- bash</pre>

2. On the Pod, log in to the MySQL database by running:

    ```
    mysql --user=USER --password=PASSWORD
    ```
    Where:
    * `USER` is a user name on the database. When the database is first created, only the root user exists.
    * `PASSWORD` is the password for the database user.

    For example:

    <pre class="terminal">mysql@mysql-sample-0:/$ mysql --user=root --password=$(&lt;etc/mysql/secrets/root-password)</pre>

3. Query the database by running:

    ```
    mysql>SELECT * FROM performance_schema.replication_group_members\G;
    ```
    The following example is from
    a healthy cluster with a single member designated `PRIMARY` and two `SECONDARY` members:

    <pre class="terminal">
mysql>SELECT * FROM performance_schema.replication_group_members\G;
*************************** 1. row ***************************
  CHANNEL_NAME: group_replication_applier
     MEMBER_ID: 157baa2a-8c22-11eb-847c-0242ac110009
   MEMBER_HOST: mysql-ha-sample-0.mysql-ha-sample-members.default.svc.cluster.local
   MEMBER_PORT: 3306
  MEMBER_STATE: ONLINE
   MEMBER_ROLE: PRIMARY
MEMBER_VERSION: 8.0.22
*************************** 2. row ***************************
  CHANNEL_NAME: group_replication_applier
     MEMBER_ID: 281ad3c9-8c22-11eb-b3aa-0242ac11000a
   MEMBER_HOST: mysql-ha-sample-1.mysql-ha-sample-members.default.svc.cluster.local
   MEMBER_PORT: 3306
  MEMBER_STATE: ONLINE
   MEMBER_ROLE: SECONDARY
MEMBER_VERSION: 8.0.22
*************************** 3. row ***************************
  CHANNEL_NAME: group_replication_applier
     MEMBER_ID: 3c52bb9a-8c22-11eb-aade-0242ac11000b
   MEMBER_HOST: mysql-ha-sample-2.mysql-ha-sample-members.default.svc.cluster.local
   MEMBER_PORT: 3306
  MEMBER_STATE: ONLINE
   MEMBER_ROLE: SECONDARY
MEMBER_VERSION: 8.0.22
</pre>





##<a id='ha-to-sn'></a>Move an HA MySQL Instance to a Single-Node MySQL Instance


To move from HA MySQL instance to a single-node MySQL instance, you need to backup the HA instance
and restore the backup to a single-node instance:


1. Back up the HA MySQL instance.
   See [Back Up Tanzu SQL for Kubernetes Data](backup-restore.html#backup) in _Backing Up and Restoring MySQL Instances_.

2. Restore the backup to a single-instance node.
   See [Restore from a Backup](backup-restore.html#backup-restore.html#restore-from-backup)
   in _Backing Up and Restoring MySQL Instances_.
   When you edit the `restore.yaml` copy, set `highAvailability.enabled` to `false`.

<p class="note">
   <strong>Note:</strong>
You cannot scale down an existing HA MySQL instance to a single-node instance
by applying <code>highAvailablity.enabled: false</code> to an HA instance.
The apply command will error.
</p>

## <a id='delete'></a>Delete an HA MySQL Instance

Deleting an HA MySQL instance is the same as deleting a single-node instance
except that for HA you delete multiple Pods.

To delete an HA MySQL instance:

1. See [Delete a MySQL Instance](create-delete-mysql.html#delete-instance)
in _Creating and Deleting MySQL Instances_.
