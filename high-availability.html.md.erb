---
title: Configuring a High-Availability MySQL Instance
---

This topic describes how to enable high availability for <%= vars.product_short %>.
High availability offers automatic failover, ensuring that app requests operate continuously
and without extended downtime.

<%= vars.product_short %> uses InnoDB Cluster to provide a highly available MySQL instance on Kubernetes.
For detailed information about InnoDB Cluster features,
see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/mysql-innodb-cluster-introduction.html).

<img src="images/mysql4k8s-ha-arch-diagram.jpg" alt="MySQL HA cluster: A diagram showing the high-availability architecture.">

<a href="./images/mysql4k8s-ha-arch-diagram.jpg" target="_blank" aria-hidden="true">Click here to view a larger version of this diagram</a>

In a <%=vars.product_short %> high-availability (HA) instance,
the topology consists of five pods:

+ One primary MySQL database pod
+ Two secondary MySQL database failover pods
+ Two mysql-router[MySQL router?] pods

InnoDB Cluster ensures that data is synchronously replicated
from the primary to the secondary database pods.
If the primary pod becomes unresponsive, app requests are redirected to a secondary pod,
which gets promoted to primary.
All appication requests continue to that promoted primary,
and a new secondary mysql pod is created to replace the failed pod.

If a mysql-router pod fails, Kubernetes directs traffic to the remaining mysql-router pod
while recreating the failed pod in the background.

## <a id='prerequisites'></a> Prerequisites

Before you can configure high availability, you must have:

* **Installed the Kubernetes Operator:** For instructions,
  see [Installing <%=vars.product_short %>](https://docs-pcf-staging.sc2-04-pcf1-apps.oc.vmware.com/tanzu-mysql-kubernetes/1-n/install-operator.html).
[//]: # (Is this not required for Creating and Deleting an Instance? Are those pre-reqs not required for these procedures? Check for consistency.)

* **Be familiar with how to create and delete a MySQL instance:**
  See [Creating and Deleting a MySQL Instance](https://docs-pcf-staging.sc2-04-pcf1-apps.oc.vmware.com/tanzu-mysql-kubernetes/1-n/create-delete-mysql.html).

## <a id="ha_configuration"></a>Configuring High Availability

[//]: # (Write a stem sentence that describes what I'm doing in this procedure. What am I configuring for HA?)

1. To enable <%=vars.product_short %> high availability, edit your copy of the instance `yaml` manifest file and alter the `highAvailability` field:

    ```
    ---
    apiVersion: with.sql.tanzu.vmware.com/v1
    kind: MySQL
    metadata:
      name: mysql-ha-sample
    spec:
      storageSize: 1Gi
      imagePullSecret: tanzu-mysql-image-registry
      highAvailability:
        enabled: true
    ```

    `highAvailability` values can be `enabled: <true|false>`.
    If this field is left empty, the MySQL instance defaults to a non-HA single node configuration.

2. Execute this command to deploy or redeploy the cluster with the new `highAvailability` setting:

    ``` bash
    $ kubectl apply -f mysql-ha.yaml
    ```
    where `mysql-ha.yaml`is the Kubernetes manifest created in Step 1.

    The command output is similar to:

    ``` bash
    mysql.with.sql.tanzu.vmware.com/mysql-ha-sample created
    ```
    where _mysql-ha-sample_ is the MySQL instance `name` defined in the `yaml` manifest file in Step 1.

    At this point, the MySQL operator deploys the five MySQL pods: three mysql engine pods, and two mysql-router pods directing traffic to the primary engine pod.

## <a id="verify_configuration"></a>Verifying the HA Configuration

To confirm your HA configuration is ready for access, use `kubectl get` to review the STATUS field and confirm that it shows "Running".
Initially STATUS will show Created, until all artifacts are deployed.
Use Ctr-C to escape the watch command.

``` bash
$ watch kubectl get mysql.with.sql.tanzu.vmware.com/mysql-ha-sample
NAME              READY   STATUS    AGE
mysql-ha-sample   true    Running   3m50s
```

You can now log into the primary pod mysql using `kubectl exec -it <pod-name> --container=mysql -- bash`. (Because MySQL pods run a sidecar container, you must specify `--container=mysql` to target the mysql engine container.) Execute mysql commands from your local shell by appending mysql commands to the bash command line via `bash -c "mysql ..."`.
 Here is a mysql command exposing the status of the cluster:

You can now log onto mysql pods as described in [Accessing a Tanzu Mysql for Kubernetes Instance](https://docs-pcf-staging.sc2-04-pcf1-apps.oc.vmware.com/tanzu-mysql-kubernetes/1-n/accessing.html).
You can run commands from your local shell via "kubectl exec"; here is a command exposing the
status of the cluster:

```bash
$ kubectl exec -it mysql-ha-sample-0 --container=mysql -- bash -c \
    "mysql --user=root --password=\$(</etc/mysql/secrets/root-password) \
    --execute 'SELECT * FROM performance_schema.replication_group_members\G'"

mysql: [Warning] Using a password on the command line interface can be insecure.
*************************** 1. row ***************************
  CHANNEL_NAME: group_replication_applier
     MEMBER_ID: 157baa2a-8c22-11eb-847c-0242ac110009
   MEMBER_HOST: mysql-ha-sample-0.mysql-ha-sample-headless.default.svc.cluster.local
   MEMBER_PORT: 3306
  MEMBER_STATE: ONLINE
   MEMBER_ROLE: PRIMARY
MEMBER_VERSION: 8.0.22
*************************** 2. row ***************************
  CHANNEL_NAME: group_replication_applier
     MEMBER_ID: 281ad3c9-8c22-11eb-b3aa-0242ac11000a
   MEMBER_HOST: mysql-ha-sample-1.mysql-ha-sample-headless.default.svc.cluster.local
   MEMBER_PORT: 3306
  MEMBER_STATE: ONLINE
   MEMBER_ROLE: SECONDARY
MEMBER_VERSION: 8.0.22
*************************** 3. row ***************************
  CHANNEL_NAME: group_replication_applier
     MEMBER_ID: 3c52bb9a-8c22-11eb-aade-0242ac11000b
   MEMBER_HOST: mysql-ha-sample-2.mysql-ha-sample-headless.default.svc.cluster.local
   MEMBER_PORT: 3306
  MEMBER_STATE: ONLINE
   MEMBER_ROLE: SECONDARY
MEMBER_VERSION: 8.0.22
```

The above output shows a healthy cluster with a single member designated `PRIMARY` and two `SECONDARY` members.

## <a id="ha_considerations"></a>Other HA Considerations

Other points to consider when working with MySQL high-availabilty instances:

- MySQL high-availability instances are backed up and restored identically to single-node instances, as described in [Backing Up and Restoring](https://docs-pcf-staging.sc2-04-pcf1-apps.oc.vmware.com/tanzu-mysql-kubernetes/1-n/backup-restore.html).

  - Backups from HA instances are created from the instance''s primary mysql pod.
  - Backups from HA instances may be restored to a single-node MySQL or a high-availability MySQL.
  To specify a restore into a high-availability MySQL, include the MySQL resource property
  `spec.highAvailability.enabled: true` within the spec.instanceTemplate portion of the MySQLRestore resource (discussed in [Properties for the MySQLRestore Resource](https://docs-pcf-staging.sc2-04-pcf1-apps.oc.vmware.com/tanzu-mysql-kubernetes/1-n/property-reference-backup-restore.html#restore)).

- You can convert an existing single-node MySQL instance to high availability.
  Edit the deployment''s original yaml file to add the `highAvailability.enabled: true` parameter shown above.
  Then re-deploy the yaml file via `kubectl apply -f modifiedDeploymentFile.yaml`.

- You can not similarly scale down an existing high-availability MySQL instance to a single-node instance. 
  A deployment yaml with highAvailability.enabled set to `false` will error when applied to an existing HA instance.

  To move from HA MySQL instance to a single-node MySQL instance, backup the HA instance and restore the backup to a newly-created single-node instance.
  See above and [Backing Up and Restoring in Tanzu MySQL for Kubernetes](https://docs-pcf-staging.sc2-04-pcf1-apps.oc.vmware.com/tanzu-mysql-kubernetes/1-n/backup-restore.html) for more information.

- When creating a long-lived HA MySQL instance, you are advised to designate resource requests and limits as documented in the [Property Reference for the MySQL Resource](https://docs-pcf-staging.sc2-04-pcf1-apps.oc.vmware.com/tanzu-mysql-kubernetes/1-n/property-reference-mysql.html).
  Otherwise Kubernetes schedules pods onto node resources according to "best effort" policies, which can lead to premature pod eviction should resources become constrained.

- MySQL does not support explicit node selection and anti-affinity for controlling pod assigment to kubernetes nodes.
  Kubernetes distributes pods per to its regular placement and scheduling policies including any resource requests.
