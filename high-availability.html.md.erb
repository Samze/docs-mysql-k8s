---
title: Configuring High-Availability MySQL Instances
---

This topic describes how to create high availability for <%= vars.product_full %>.


##<a id='overview'></a>Overview

High availability (HA) MySQL instances offer automatic failover, ensuring that app requests operate continuously
and without extended downtime.

For more information about high availability including an architecture diagram,
see [Architecture of an HA MySQL Instance](architecture.html#ha-diagram)
in _Architecture_.

###<a id='planning'></a>About Planning for Long-Lived HA MySQL Instances

HA MySQL instances are often the topology of choice in production enviroments.
Before creating an HA MySQL instance that you intend to rely on for a long time,
consider the resource requests and limits carefully.

If you do not designate resource requests and limits, then Kubernetes (or is it the MySQL Operator?)
schedules pods onto node resources according to “best effort” policies.
If resources become constrained, [SOMETHING] evicts pods prematurely.
For information about the properties used to set limits (what about resource requests?),
see [Property Reference for the MySQL Resource](property-reference-mysql.html).

###<a id='node-selectionr'></a>About Explicit Node Selection and Anti-Affinity


[//]: # ( What does this mean? As a developer when do I need to know it and how does it affect my actions?)

MySQL does not support explicit node selection and anti-affinity for controlling pod assigment to kubernetes nodes.
Kubernetes distributes pods per to its regular placement and scheduling policies including any resource requests.

###<a id='scale-up'></a>Scale Up Is Easy, Scale Down Is Hard

You can convert a single-node MySQL instance to an HA MySQL instance with a single command.
See XXX.
However, it is not straightforward to convert an HA MySQL instance to a single-node MySQL instance.
This conversion requires that you take a backup of the database and copy it to a new single-node instance.
See []() for details.

### <a id='about-backups'></a> About Backing Up

HA MySQL instances are backed up and restored the same way as single-node instances. 
Backups from HA MySQL instances are created from the primary MySQL pod.
Backups from HA MySQL instances can be restored either to single-node or HA MySQL instances.

For information about backup and restore,
see [Backing Up and Restoring MySQL Instances](backup-restore.html).



## <a id='prerequisites'></a> Prerequisites

Before you can configure high availability, you must have:

<%= partial '/prerequisites' %>
* **Know how to create and delete single-node MySQL instances:**
  See [Creating and Deleting MySQL Instances](create-delete-mysql.html).

## <a id="create-ha"></a>Create an HA MySQL Instance

Follow the steps below to create a new HA MySQL Instance

1. Follow the steps in “Create a MySQL Instance” but at step 4…. 

2.  Set config by editing the YAML file.

3. Create the cluster.

4. Verify all is well.

## <a id="convert-to-ha"></a>Convert a Single-Node MySQL Instance to an HA MySQL Instancee

You cannot easily change an HA MySQL instance back to a single-node one.
Be sure that you want an HA instance before following this procedure.

Follow the steps below to change a single-node MySQL instance into an HA MySQL Instance:

1. 

## <a id="inspect-instance"></a>Inspect an HA MySQL Instance

You can do this for troubleshooting or ....

1. 

2. 



##<a id='ha-to-sn'></a>Move an HA MySQL Instance to a Single-Node MySQL Instance

1.

2.


## <a id='delete'></a>Delete an HA MySQL Instance

Same as deleting a single node instance, just more pods have to be deleted.

See [Delete a MySQL Instance](create-delete-mysql.html#delete-instance)
in _Creating and Deleting MySQL Instances_.

## <a id="ha_configuration"></a>Configure High Availability

[//]: # (Write a stem sentence that describes what I'm doing in this procedure. What am I configuring for HA?)

1. To enable <%=vars.product_short %> high availability, edit your copy of the instance `yaml` manifest file and alter the `highAvailability` field:

    ```
    ---
    apiVersion: with.sql.tanzu.vmware.com/v1
    kind: MySQL
    metadata:
      name: mysql-ha-sample
    spec:
      storageSize: 1Gi
      imagePullSecret: tanzu-mysql-image-registry
      highAvailability:
        enabled: true
    ```

    `highAvailability` values can be `enabled: <true|false>`.
    If this field is left empty, the MySQL instance defaults to a non-HA single node configuration.

2. Execute this command to deploy or redeploy the cluster with the new `highAvailability` setting:

    ``` bash
    $ kubectl apply -f mysql-ha.yaml
    ```
    where `mysql-ha.yaml`is the Kubernetes manifest created in Step 1.

    The command output is similar to:

    ``` bash
    mysql.with.sql.tanzu.vmware.com/mysql-ha-sample created
    ```
    where _mysql-ha-sample_ is the MySQL instance `name` defined in the `yaml` manifest file in Step 1.

    The MySQL Operator deploys five MySQL pods: three MySQL engine pods and two mysql-router pods directing traffic to the primary engine pod.

3. Verify that the HA MySQL instance was created successfully by running:


## <a id="verify_configuration"></a>Verify the HA Configuration

To confirm your HA configuration is ready for access, use `kubectl get` to review the STATUS field and confirm that it shows "Running".
Initially STATUS will show Created, until all artifacts are deployed.
Use Ctr-C to escape the watch command.

``` bash
$ watch kubectl get mysql.with.sql.tanzu.vmware.com/mysql-ha-sample
NAME              READY   STATUS    AGE
mysql-ha-sample   true    Running   3m50s
```

You can now log into the primary pod mysql using `kubectl exec -it <pod-name> --container=mysql -- bash`. (Because MySQL pods run a sidecar container, you must specify `--container=mysql` to target the mysql engine container.) Execute mysql commands from your local shell by appending mysql commands to the bash command line via `bash -c "mysql ..."`.
 Here is a mysql command exposing the status of the cluster:

You can now log onto mysql pods.
For instructions, see [Accessing a Tanzu Mysql for Kubernetes Instance](accessing.html).
You can run commands from your local shell via "kubectl exec"; here is a command exposing the
status of the cluster:

```bash
$ kubectl exec -it mysql-ha-sample-0 --container=mysql -- bash -c \
    "mysql --user=root --password=\$(</etc/mysql/secrets/root-password) \
    --execute 'SELECT * FROM performance_schema.replication_group_members\G'"

mysql: [Warning] Using a password on the command line interface can be insecure.
*************************** 1. row ***************************
  CHANNEL_NAME: group_replication_applier
     MEMBER_ID: 157baa2a-8c22-11eb-847c-0242ac110009
   MEMBER_HOST: mysql-ha-sample-0.mysql-ha-sample-headless.default.svc.cluster.local
   MEMBER_PORT: 3306
  MEMBER_STATE: ONLINE
   MEMBER_ROLE: PRIMARY
MEMBER_VERSION: 8.0.22
*************************** 2. row ***************************
  CHANNEL_NAME: group_replication_applier
     MEMBER_ID: 281ad3c9-8c22-11eb-b3aa-0242ac11000a
   MEMBER_HOST: mysql-ha-sample-1.mysql-ha-sample-headless.default.svc.cluster.local
   MEMBER_PORT: 3306
  MEMBER_STATE: ONLINE
   MEMBER_ROLE: SECONDARY
MEMBER_VERSION: 8.0.22
*************************** 3. row ***************************
  CHANNEL_NAME: group_replication_applier
     MEMBER_ID: 3c52bb9a-8c22-11eb-aade-0242ac11000b
   MEMBER_HOST: mysql-ha-sample-2.mysql-ha-sample-headless.default.svc.cluster.local
   MEMBER_PORT: 3306
  MEMBER_STATE: ONLINE
   MEMBER_ROLE: SECONDARY
MEMBER_VERSION: 8.0.22
```

The above output shows a healthy cluster with a single member designated `PRIMARY` and two `SECONDARY` members.

## <a id="ha_considerations"></a>Other HA Considerations

Other points to consider when working with high-availability MySQL instances:

- High-availability MySQL instances are backed up and restored identically to single-node instances.
  For information, see [Backing Up and Restoring MySQL Instances](backup-restore.html).

  - Backups from HA instances are created from the primary mysql pod.
  - Backups from HA instances may be restored to a single-node MySQL or a high-availability MySQL.
  To specify a restore into a high-availability MySQL, include the MySQL resource property
  `spec.highAvailability.enabled: true` within the spec.instanceTemplate portion of the MySQLRestore resource.
   For information about resource properties,
   see [Properties for the MySQLRestore Resource](property-reference-backup-restore.html#restore).

- You can convert an existing single-node MySQL instance to high availability.
  Edit the original yaml file for the deployment to add the `highAvailability.enabled: true` parameter shown above.
  Then re-deploy the yaml file via `kubectl apply -f modifiedDeploymentFile.yaml`.

- You can not similarly scale down an existing high-availability MySQL instance to a single-node instance. 
  A deployment yaml with highAvailability.enabled set to `false` will error when applied to an existing HA instance.

  To move from HA MySQL instance to a single-node MySQL instance, backup the HA instance and restore the backup to a newly-created single-node instance.
  For more information, see above and [Backing Up and Restoring MySQL Instances](backup-restore.html).

- When creating a long-lived HA MySQL instance, designate resource requests and limits.
  Otherwise Kubernetes schedules pods onto node resources according to "best effort" policies, which can lead to premature pod eviction should resources become constrained.
 For information about the properties used to set limits, see [Property Reference for the MySQL Resource](property-reference-mysql.html).

- MySQL does not support explicit node selection and anti-affinity for controlling pod assigment to kubernetes nodes.
  Kubernetes distributes pods per to its regular placement and scheduling policies including any resource requests.
