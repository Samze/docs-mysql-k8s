---
title: Connecting an App to the MySQL Instance
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic explains how you, as a developer, connect an app to your MySQL instance.

## <a id='AboutTile'></a>About Binding Apps to a MySQL Instance

After you have created a MySQL instance,
the next task is to bind it to your app so that your app can access the database.

You do this by creating a database and privileged mysql user for the application, and
configuring your application with mysql user and connectivity information.

## <a id='prereq'></a>Prerequisites

Before you bind an app to a MySQL instance, you must have:

* **The Kubernetes Command Line Interface (kubectl) installed:**
For more information, see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/).

* **A MySQL instance running in the same Kubernetes cluster as the app:**
  This is required. The ServiceType is ClusterIP.
  However, instances can be in a different namespace from the app.<br>
  For how to create an instance, see [Creating and Deleting a MySQL Instance](create-delete-mysql.html).<br>
  For information about the ClusterIP ServiceType, see the
  [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).

<p class="note">
    <strong>Note:</strong> To avoid Kubernetes permissions issues,
    VMware recommends that developers have admin access to their target namespace.
</p>

The below steps show creating a mysql database and privileged user, and deploying the
Bitnami Wordpress Helm chart configured to use your database and user.

## <a id='create-app-db'></a>Create a Database and Privileged MySQL User for the Application

Use kubectl to exec into your mysql pod, connect to mysql as the database admin, and create
the database and user.

For example, to connect to a single-node instance named "mysql-sample":

<pre class="terminal">
$ kubectl exec -it mysql-sample-0 -c mysql -- bash
mysql@mysql-sample-0:/$
</pre>

To connect to a high availability instance, you must identify which of
its three pods is primary (writable). The below
command returns the (kubernetes-internal) domain name
of the desired primary node; the primary pod''s name is the first dot-separated component of this
commands'' output:

<pre class="terminal">
$ kubectl exec -it mysql-sample-0 -c mysql -- bash -c \
      "mysql -B -s --user=root --password=\$(</etc/mysql/secrets/root-password) \
      --execute 'SELECT MEMBER_HOST FROM performance_schema.replication_group_members \
      WHERE (MEMBER_ROLE=\"PRIMARY\")'"

mysql: [Warning] Using a password on the command line interface can be insecure.
mysql-sample-1.mysql-sample-headless.default.svc.cluster.local

$ kubectl exec -it mysql-sample-1 -c mysql -- bash
mysql@mysql-sample-0:/$
</pre>

Once you are on the pod, create any mysql constructs your application requires,
and the user privileged to access those constructs as needed by your application.

For example, here we create a database and user for our Bitnami Wordpress deployment:

<pre class="terminal">
mysql -p$(cat $MYSQL_ROOT_PASSWORD_FILE) -u root
mysql> CREATE DATABASE bitnami_wordpress;
Query OK, 1 row affected (0.20 sec)

mysql> CREATE USER 'bn_wordpress'@'%' IDENTIFIED BY 'hunter2';
Query OK, 0 rows affected (0.08 sec)

mysql> GRANT ALL PRIVILEGES ON bitnami_wordpress.* TO 'bn_wordpress'@'%';
Query OK, 0 rows affected (0.03 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.10 sec)
</pre>

## <a id='config-app-db'></a>Configure Your Application with MySQL User and Connectivity Information

Application configuration will be specific to the application being deployed. Here
we show an example of a Bitnami Wordpress Helm chart, with (1) the user password (created
above) and (2) the cluster-internal domain name for the mysql service (passed in as `externalDatabase.host`):

<pre class="terminal">
$ helm repo add bitnami https://charts.bitnami.com/bitnami
"bitnami" has been added to your repositories<br>
$ helm install wp bitnami/wordpress \
    --set mariadb.enabled=false \
    --set externalDatabase.host=mysql-sample.default.svc.cluster.local \
    --set externalDatabase.password=hunter2
NAME: wp
LAST DEPLOYED: Tue Dec 8 14:32:08 2020
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
** Please be patient while the chart is being deployed **
...
</pre>

Retrieve the Wordpress user password by running:

```
kubectl get secret wp-wordpress -o go-template='{{index .data "wordpress-password" | base64decode}}'
```
