---
title: Connecting Apps to MySQL Instances
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic explains how you, as a developer, connect an app to your MySQL instance.

## <a id='AboutTile'></a>About Connecting Apps to a MySQL Instance

After you have created a MySQL instance,
the next task is to connect it to your app so that your app can access the database.

You do this by creating a database and privileged mysql user for the application, and
configuring your application with mysql user and connectivity information.

## <a id='prereq'></a>Prerequisites

Before you connect an app to a MySQL instance, you must have:

* **The Kubernetes Command Line Interface (kubectl) installed:**
For more information, see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/).

* **A MySQL instance running in the same Kubernetes cluster as the app:**
  This is required. The ServiceType is ClusterIP.
  However, instances can be in a different namespace from the app.<br>
  For how to create an instance, see [Creating and Deleting MySQL Instances](create-delete-mysql.html).<br>
  For information about the ClusterIP ServiceType, see the
  [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).

<p class="note">
    <strong>Note:</strong> To avoid Kubernetes permissions issues,
    VMware recommends that developers have admin access to their target namespace.
</p>

The below steps show creating a mysql database and privileged user, and deploying the
Bitnami Wordpress Helm chart configured to use your database and user.

## <a id='create-app-db'></a>Create a Database and Privileged MySQL User for the Application

1.  Use kubectl to exec into your mysql pod.

2. Connect to mysql as the database admin.

3. Create the database and user.

For example, to connect to a single-node instance named "mysql-sample":

<pre class="terminal">
$ kubectl exec -it mysql-sample-0 -c mysql -- bash
mysql@mysql-sample-0:/$
</pre>

To connect to a high-availability instance, you must identify which of
its three pods is primary (writable). The below
command returns the (kubernetes-internal) domain name
of the desired primary node; the primary pod name is the first dot-separated component of this
command output:

<pre class="terminal">

$ kubectl exec -it mysql-sample-0 -c mysql -- bash -c \
      "mysql -B -s --user=root --password=\$(&lt;/etc/mysql/secrets/root-password) \
      --execute 'SELECT MEMBER_HOST FROM performance_schema.replication_group_members \
      WHERE (MEMBER_ROLE=\"PRIMARY\")'"

mysql: [Warning] Using a password on the command line interface can be insecure.
mysql-sample-1.mysql-sample-members.default.svc.cluster.local

$ kubectl exec -it mysql-sample-1 -c mysql -- bash
mysql@mysql-sample-1:/$

</pre>

[//]: # ( We deleted an angle bracket from before the /etc in the above command.)

Once you are on the pod, create any mysql constructs your application requires,
and the user privileged to access those constructs as needed by your application.

For example, here we create a database and user for our Bitnami Wordpress deployment:

<pre class="terminal">
$ mysql -p$(&lt;/etc/mysql/secrets/root-password) -u root
mysql> CREATE DATABASE bitnami_wordpress;
Query OK, 1 row affected (0.20 sec)

mysql> CREATE USER 'bn_wordpress'@'%' IDENTIFIED BY 'hunter2';
Query OK, 0 rows affected (0.08 sec)

mysql> GRANT ALL PRIVILEGES ON bitnami_wordpress.* TO 'bn_wordpress'@'%';
Query OK, 0 rows affected (0.03 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.10 sec)
</pre>

## <a id='config-app-db'></a>Configure Your Application with MySQL User and Connectivity Information

Application configuration will be specific to the application being deployed.

Here we show deploying a Bitnami Wordpress Helm chart using (1) TLS certificates generated by cert-manager,
(2) the user password and database information created above, and (3) the cluster-internal domain name
for the mysql service (passed in as `externalDatabase.host`). We assume the MySQL instance is named
`mysql-sample` and deployed to the `default` namespace.

1. Within your cluster, install cert-manager if it is not already present. ([Instructions](https://cert-manager.io/docs/installation/kubernetes/))

2. Generate a certificate for MySQL to present to Wordpress, and meeting Wordpress'' authentication
requirements.

    Wordpress authenticates signed certificates within the cluster. Therefore we generate two Issuers: the
    first Issuer `selfsigned-issuer` generates a certificate `ca-certificate`  for the second Issuer `tls-issuer`.
    That second Issuer generates the actual `tls-certificate` which MySQL will present:

    <pre class="terminal">
    cat &lt;&lt;EOF | kubectl apply -f -
    ---
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      name: selfsigned-issuer
    spec:
      selfSigned: {}
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: ca-certificate
    spec:
      isCA: true
      issuerRef:
        name: selfsigned-issuer
      secretName: ca-secret
      commonName: ca-cert
    ---
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      name: tls-issuer
    spec:
      ca:
        secretName: ca-secret
    ---
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: tls-certificate
    spec:
      isCA: false
      dnsNames:
        - mysql-sample.default # SEE NOTE AT END
      secretName: tls-secret
      issuerRef:
        name: tls-issuer
    EOF
    </pre>
<p class="note">
    <strong>Note:</strong> If Wordpress is deployed <b>within the same Kubernetes cluster</b> as your instance,
         specify MYSQL-INSTANCE-NAME.MYSQL-INSTANCE-NAMESPACE for spec.dnsNames.
</p>
3. Re-deploy mysql to present the above-created `tls-certificate` when receiving a client
connection request.

    Add to the deployment yaml the spec property `spec.tls.secret.name`
    and apply the result. You may edit your original deployment yaml and `kubectl apply -f ...`
    the result, or for a deployed instance, `kubectl edit mysql.with.sql.tanzu.vmware.com/mysql-sample`
    and edit in place:

    ```
    spec:
      ...
      tls:
        secret:
          name: tls-secret
      ...
    ```
    You may validate a successful deployment by inspecting the startup output:
    <pre class="terminal">
    $ kubectl logs pod/mysql-sample-0 -c mysql
    Initialization complete, now exiting!
    2021-04-06T02:07:02.667789Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.22-13) starting as process 1
    2021-04-06T02:07:02.675491Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.
    2021-04-06T02:07:02.907693Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.
    2021-04-06T02:07:03.055031Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Bind-address: '::' port: 33060, socket: /var/run/mysqld/mysqlx.sock
    2021-04-06T02:07:03.157475Z 0 [Warning] [MY-010068] [Server] CA certificate /etc/mysql/certs/ca.pem is self signed.
    2021-04-06T02:07:03.161660Z 0 [System] [MY-013602] [Server] Channel mysql_main configured to support TLS. Encrypted connections are now supported for this channel.
    </pre>

    Additional information is in
    [Configuring TLS for MySQL Instances](https://docs-pcf-staging.sc2-04-pcf1-apps.oc.vmware.com/tanzu-mysql-kubernetes/1-n/configure-tls.html#using-cert-manager).

4. Deploy the Bitnami Wordpress chart, specifying the above-created:
  - database username `bn_wordpress`
  - database user password `hunter2`
  - database name `bitnami_wordpress`
  - secret containing MySQL's signed certificate `tls-secret`

    The below mounts a volume holding the CA's secret onto the bitnami container, which then reads
    the mount point into the environment variable `WORDPRESS_DATABASE_SSL_CA_FILE`:

    <pre class="terminal">
    $ helm repo add  bitnami https://charts.bitnami.com/bitnami
    "bitnami" has been added to your repositories

    $ helm install wp bitnami/wordpress -f - &lt;&lt;EOF
    mariadb:
      enabled: false

    externalDatabase:
      host: mysql-sample.default.svc.cluster.local
      user: bn_wordpress
      password: hunter2
      database: bitnami_wordpress

    extraEnvVars:
    - name: "WORDPRESS_DATABASE_SSL_CA_FILE"
      value: "/etc/mysql/tls/ca.crt"

    extraVolumes:
    - name: mysql-ca
      secret:
        secretName: "tls-secret"
        items:
        - key: ca.crt
          path: ca.crt

    extraVolumeMounts:
      - name: mysql-ca
        mountPath: /etc/mysql/tls/
    EOF


    NAME: wp
    LAST DEPLOYED: Tue Dec 8 14:32:08 2020
    NAMESPACE: default
    STATUS: deployed
    REVISION: 1
    TEST SUITE: None
    NOTES:
    ** Please be patient while the chart is being deployed **
    </pre>

    On successful installation, helm will display wordpress instructions to connect as a user and admin
    to the running wordpress server. You can also retrieve the Wordpress user password by running:

    <pre class="terminal">
    $ kubectl get secret wp-wordpress -o go-template='{{index .data "wordpress-password" | base64decode}}'
    </pre>
