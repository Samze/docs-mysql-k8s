---
title: Backing Up and Restoring in <%= vars.product_short %>
owner: MySQL
---
<% current_page.data.title = "Backup and Restore in " + vars.product_short %>

This topic describes how to back up and restore <%= vars.product_full %>.

## <a id="overview"></a> Overview

<%= vars.product_short %> allows you to generate on-demand backups,
configure a schedules for automated backups, and restore backups to new TanzuMySQL instances.

For uploading and retrieving backup artifacts,
<%= vars.product_short %> currently supports S3, Minio, and other S3-compatible storage.

For backing up and restoring, 
<%= vars.product_short %> uses four of the five Custom Resource Definitions (CRDs):

  * **TanzuMySQLBackup:** References a TanzuMySQL backup artifact that exists in an
    external blobstore such as S3 or Minio. A new TanzuMySQLBackup resource is created
    every time an on-demand or scheduled backup is generated.

  * **TanzuMySQLBackupLocation:** References an external blobstore and credentials
    necessary to access the blobstore.

  * **TanzuMySQLBackupSchedule:** Represents a CronJob schedule on which to perform
    backups.

  * **TanzuMySQLRestore:** References an instance of a restore that was performed.
    A new TanzuMySQLRestore resource is created every time a restore is performed.

For detailed information about the CRDs,
see [Controllers and Custom Resource Definitions (CRDs)](architecture.html#controllers-crds)
in _Tanzu MySQL for Kubernetes Architecture_.

##<a id="sync-of-backups"></a> About Synchronization of Backups with the External Blobstore

<%= vars.product_short %> syncs TanzuMySQLBackup resources in a Kubernetes cluster with the
contents of the external blobstore.
The external blobstore is treated as the source of truth.
This means that, if a `TanzuMySQLBackup` resource is deleted on the Kubernetes cluster, but the
associated backup artifact still exists in the external blobstore, <%= vars.product_short %>
re-creates the `TanzuMySQLBackup` resource to match the contents of the external
blobstore.


##<a id="create-backuplocation"></a> Create a TanzuMySQLBackupLocation Resource

The purpose of creating this TanzuMySQLBackupLocation Resource is to configure the namespace
with the location of the blobstore and the credentials to access it.

To create a TanzuMySQLBackupLocation resource:

CAN I REPLACE?

1. Configure your backup location using the following TanzuMySQLBackupLocation YAML as a template:

WITH:

1. Create a backuplocation.yaml file. You can use this as a template:

    ```
    ---
    apiVersion: mysql.tanzu.vmware.com/v1alpha1
    kind: TanzuMySQLBackupLocation
    metadata:
      name: backuplocation-sample
    spec:
      storage:
        # For S3 or Minio:
        s3:
          bucket: "name-of-bucket"
          bucketPath: "my-backups-prefix/"
          # region: "us-east-1"
          endpoint:  "" # optional, default to AWS
          forcePathStyle: false
          disableSSL: false
          secret:
            name: backuplocation-sample-creds
    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: backuplocation-sample-creds
    stringData:
      # S3 Credentials
      accessKeyId: "my-access-key-id"
      secretAccessKey: "my-secret-access-key"
    ```

2. Create the TanzuMySQLBackupLocation resource in the same namespace as the TanzuMySQL instances that
   you want backup by running:

    ```
    kubectl apply -f backuplocation.yaml -n DEVELOPMENT-NAMESPACE
    ```
    Where is `DEVELOPMENT-NAMESPACE` is the namespace for the instance.

    For example:

    <pre class="terminal">$ kubectl apply -f backuplocation.yaml -n my-namespace
tanzumysqlbackuplocation.mysql.tanzu.vmware.com/backuplocation-sample created
secret/backuplocation-sample-creds configured
    </pre>

3. Verify that the TanzuMySQLBackupLocation has been created.
```
→ kubectl get tanzumysqlbackuplocation backuplocation-sample -o json -n DEVELOPMENT-NAMESPACE | jq .spec
{
  "storage": {
    "s3": {
      "bucket": "bucket-sample",
      "disableSSL": false,
      "forcePathStyle": false,
      "region": "us-west-1",
      "secret": {
        "name": "backuplocation-sample-creds"
      }
    }
  }
}
```

### Create a TanzuMySQLBackupSchedule Resource <%# Make H2 and H3 headers anchors. Use "a id" to include the anchor in the subnav. Use "a name" to leave it out. %>
[Why are we creating a TanzuMySQLBackupSchedule? To set a schedule for automatic backups.]
1. Configure your backup schedule using the TanzuMySQLBackupSchedule YAML template. Example YAML file:
```
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLBackupSchedule
metadata:
  name: tanzumysqlbackupschedule-sample
spec:
  backupTemplate:
    spec:
      location:
        name: backuplocation-sample
      cluster:
        name: tanzumysql-sample
  schedule: "@daily"
```

TanzuMySQLBackupSchedule (make into a table)
* Property, Type, Default, Description, Example,<%# If this sentence contains a list, reformat the list as bullets. If the sentence is just rambling, break it up into small sentences. %> Required?
* m<%# Bullet points start with uppercase letters. %>etadata.name, String, None, The name of the TanzuMySQLBackupSchedule. Must be unique within a namespace., backupschedule-sample, Yes
* s<%# Bullet points start with uppercase letters. %>pec.backupTemplate.spec<%# "specifications" is preferred. %>.location.name, String, None, The name of the TanzuMySQLBackupLocation that represents the blobstore where backups will<%# Avoid "will": present tense is preferred. %> be uploaded. Must be in the same namespace as the TanzuMySQLBackupSchedule., backuplocation-sample, Yes
* s<%# Bullet points start with uppercase letters. %>pec.backupTemplate.spec<%# "specifications" is preferred. %>.cluster.name, String, None, The name of the TanzuMySQL instance on which you would<%# Re-phrase for present tense if possible. %> like to perform scheduled backups. Must be in the same namespace as the TanzuMySQLBackupSchedule., tanzumysql-sample, Yes
* s<%# Bullet points start with uppercase letters. %>pec.schedule, String (Cron schedule), None, The cron schedule on which backups will<%# Avoid "will": present tense is preferred. %> be performed. Must be a valid cron schedule., "0 23 * * 6" (every Saturday at 11PM), Yes

2. Create the TanzuMySQLBackupSchedule resource in the same namespace as the TanzuMySQLBackupLocation and TanzuMySQL instance that
   you referenced in the TanzuMySQLBackupSchedule YAML file.
```
→ kubectl apply -f backupschedule.yaml -n DEV-NAMESPACE
tanzumysqlbackupschedule.mysql.tanzu.vmware.com/backupschedule-sample created
```

3. Verify that the TanzuMySQLBackupSchedule has been created.
```
→ kubectl get tanzumysqlbackupschedule tanzumysqlbackupschedule-sample -o json -n DEV-NAMESPACE | jq .spec
{
  "backupTemplate": {
    "spec": {
      "cluster": {
        "name": "demo-db"
      },
      "location": {
        "name": "demo-backuplocation"
      }
    }
  },
  "schedule": "@daily"
}
```

If you correctly configure both a `TanzuMySQLBackupLocation` resource and `TanzuMySQLBackupSchedule` resource for
an existing TanzuMySQL instance, you should start seeing backups being generated and uploaded to the external blobstore.
By default, Tanzu MySQL for Kubernetes stores backup artifacts under the subfolder structure `yyyy > mm > dd`.

TanzuMySQLBackup resources that are automatically generated as a result of a TanzuMySQLBackupSchedule are named
`[SCHEDULE-NAME]-[TIMESTAMP]`. For example, if a TanzuMySQLBackupSchedule name is `tanzumysqlbackupschedule-sample`,
and a backup was taken at timestamp `1607633463`, then the TanzuMySQLBackup will be named
`tanzumysqlbackupschedule-sample-1607633463`.

### Perform an On-Demand Backup

You must have an existing TanzuMySQL instance that you want to take a backup of. You must also have already
configured a TanzuMySQLBackupLocation that represents the external blobstore to which you will<%# Avoid "will": present tense is preferred. %> upload the
generated backup artifact.

1. Configure your backup using the TanzuMySQLBackup YAML template. Example YAML file:
```
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLBackup
metadata:
  name: backup-sample
spec:
  location:
    name: backuplocation-sample
  cluster:
    name: tanzumysql-sample
```

TanzuMySQLBackup (make into a table)
* Property, Type, Default, Description, Example,<%# If this sentence contains a list, reformat the list as bullets. If the sentence is just rambling, break it up into small sentences. %> Required?
* m<%# Bullet points start with uppercase letters. %>etadata.name, String, None, The name of the TanzuMySQLBackup. Must be unique within a namespace., backup-sample, Yes
* s<%# Bullet points start with uppercase letters. %>pec.location.name, String, None, The name of the TanzuMySQLBackupLocation that represents the blobstore where the backup will<%# Avoid "will": present tense is preferred. %> be uploaded. Must be in the same namespace as the TanzuMySQL instance., Yes
* s<%# Bullet points start with uppercase letters. %>pec.cluster.name, String, None, The name of the TanzuMySQL instance on which you would<%# Re-phrase for present tense if possible. %> like to perform the on-demand backup., Yes

2. Trigger the backup by creating the TanzuMySQLBackup in the same namespace as the TanzuMySQL instance
   that you want to take a backup of.
```
→ kubectl apply -f tanzumysqlbackup.yaml -n DEV-NAMESPACE
tanzumysqlbackup.mysql.tanzu.vmware.com/backup-sample created
```

3. Verify that a backup has been generated and track the progress of your backup by doing the following. For an explanation
   of what each column means, see "List existing TanzuMySQLBackup resources"
```
→ kubectl get tanzumysqlbackup backup-sample -n DEV-NAMESPACE
NAME            STATUS      TIME SCHEDULED                TIME STARTED                  TIME COMPLETED                AGE
backup-sample   Succeeded   2020-12<%# Use &ndash; for a range, not a regular dash. %>-01T21:49:26.138676Z   2020-12<%# Use &ndash; for a range, not a regular dash. %>-01T21:49:26.148835Z   2020-12<%# Use &ndash; for a range, not a regular dash. %>-01T21:49:30.609250Z   16m
```


### List existing TanzuMySQLBackup resources
1. `kubectl get tanzumysqlbackup`
```
→ k get tanzumysqlbackup
NAME            STATUS   TIME SCHEDULED                TIME STARTED   TIME COMPLETED   AGE
backup-sample   Failed   2020-12-09T18:28:23.339156Z                                   23h
```
- STATUS - Represents the current status of the backup. Possible values can be<%# Consider switching to active voice. %>:
  - Pending: The backup has been received but not yet<%# 1st preference: delete. 2nd preference: replace these words with "currently". %> scheduled on a TanzuMySQL pod<%# "Pod" is capitalized per the K8s docs style. %>.
  - Scheduled: The backup has been scheduled on a selected TanzuMySQL pod<%# "Pod" is capitalized per the K8s docs style. %> but has not started.
  - Running: The backup is currently being generated and streamed to the external blobstore
  - Succeeded: The backup has completed successfully
  - Failed: The backup has failed to complete. To troubleshoot, see the below section on how to troubleshoot a failed backup.
- TIME SCHEDULED - The time at which the backup was scheduled on a selected TanzuMySQL pod<%# "Pod" is capitalized per the K8s docs style. %>.
- TIME STARTED - The time at which the backup process started.
- TIME COMPLETED - The time at which the backup process completed. If the backup fails, this value will<%# Avoid "will": present tense is preferred. %> be empty.
- AGE - Age of the backup since<%# Do not use "since" where you can use "because". %> it was requested.

### Deleting Old Backup Artifacts
Tanzu MySQL for Kubernetes does not natively support retention policies for backup artifacts. You may configure
retention policies on your external blobstore. If you do, you must also delete the associated TanzuMySQLBackup
resources in the Kubernetes cluster, as those are not automatically deleted by Tanzu MySQL for Kubernetes.

To delete a backup,
1. make sure it's deleted in the blobstore.
1. on your k8s cluster, `kubectl delete tanzumysqlbackup BACKUP-NAME -n DEV-NAMESPACE`

##<id="restore"></a>Restore

This section discusses restoring.

+ Restore from a Backup
+ Restoring a Backup to a Different Namespace or Kubernetes Cluster

###<a id="restore-from-backup"></a> Restore from a Backup <%# Make H2 and H3 headers anchors. Use "a id" to include the anchor in the subnav. Use "a name" to leave it out. %>

You must have an existing TanzuMySQLBackup in your current namespace. You must also have a TanzuMySQLBackupLocation
that represents the bucket where the existing backup artifact is stored.

TanzuMySQLRestores will<%# Avoid "will": present tense is preferred. %> always restore to a new TanzuMySQL instance. The TanzuMySQL instance is created automatically
when the restore is triggered. <%= vars.product_short %> does not allow restoring a backup to an existing TanzuMySQL
instance. Although it is possible to<%# Consider shortening to "You can" or rewriting the sentence as an imperative. %> perform this manually by interacting directly with the Kubernetes API, VMware
strongly<%# Consider deleting, especially if it precedes "recommend". %> discourages this action as you may<%# "can" usually works better. Use "might" to convey possibility. %> run the risk of losing data.

1. Configure your restore using the TanzuMySQLRestore YAML template. Example YAML file:
```
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLRestore
metadata:
  name: tanzumysqlrestore-sample
spec:
  tanzuMysqlBackup:
    name: backup-sample
  tanzuMysqlTemplate:
    metadata:
      name: tanzumysql-sample
    spec:
      storageSize: 1Gi
      imagePullSecret: tanzu-mysql-image-registry

```

TanzuMySQLRestore (make into a table)
* Property, Type, Default, Description, Example,<%# If this sentence contains a list, reformat the list as bullets. If the sentence is just rambling, break it up into small sentences. %> Required?
* m<%# Bullet points start with uppercase letters. %>etadata.name, String, None, The name of the TanzuMySQLRestore. Must be unique within a namespace., tanzumysqlrestore-sample, Yes
* s<%# Bullet points start with uppercase letters. %>pec.tanzuMysqlBackup.name, String, None, The name of the TanzuMySQLBackup that represents the backup artifact you wish<%# "want" is preferred. %> to restore. Must be in the same namespace as the TanzuMySQLRestore., Yes
* s<%# Bullet points start with uppercase letters. %>pec.MysqlTemplate, , , The configuration for the TanzuMySQL instance that the backup artifact will<%# Avoid "will": present tense is preferred. %> be restored to. This TanzuMySQL instance will<%# Avoid "will": present tense is preferred. %> be created automatically as part of the restore, so the name must not already exist in the namespace.
  For descriptions of each value in the configuration template, see [Creating a TanzuMySQL instance](http://docs-pcf-staging.cfapps.io/tanzu-mysql-kubernetes/1-n/create-delete-mysql.html#create-yaml)., Yes <%# Do not link to staging versions of the docs. %>

2. Trigger the restore by creating the TanzuMySQLRestore in the same namespace as the TanzuMySQLBackup and TanzuMySQLBackupLocation.
```
→ kubectl apply -f tanzumysqlrestore.yaml -n DEV-NAMESPACE
tanzumysqlrestore.mysql.tanzu.vmware.com/tanzumysqlrestore-sample created
```

3. Verify that a restore has been triggered and track the progress of your restore by doing the following.
```
→ kubectl get tanzumysqlrestore tanzumysqlrestore-sample -n DEV-NAMESPACE
NAME                       STATUS      TIME STARTED                  TIME COMPLETED                AGE
tanzumysqlrestore-sample   Succeeded   2020-12<%# Use &ndash; for a range, not a regular dash. %>-01T21:52:30.000000Z   2020-12<%# Use &ndash; for a range, not a regular dash. %>-01T21:53:09.163336Z   13m
```
  - STATUS - Represents the current status of the restore. Possible values can be<%# Consider switching to active voice. %>:
    - Pending: The restore has been received but not yet<%# 1st preference: delete. 2nd preference: replace these words with "currently". %> scheduled.
    - Scheduled: The restore has been scheduled but has not started.
    - Running: The restore is currently in process.
    - Succeeded: The restore has completed successfully
    - Failed: The restore has failed to complete. To troubleshoot, see the below section on how to troubleshoot a failed restore.
  - TIME SCHEDULED - The time at which the restore was scheduled.
  - TIME STARTED - The time at which the restore process started.
  - TIME COMPLETED - The time at which the restore process completed. If the restore fails, this value will<%# Avoid "will": present tense is preferred. %> be empty.
  - AGE - Age of the restore since<%# Do not use "since" where you can use "because". %> it was requested.

###<a id="restore-to-different"></a> Restoring a Backup to a Different Namespace or Kubernetes Cluster

If you want to restore a backup to a different namespace or a different Kubernetes cluster,
create a `TanzuMySQLBackupLocation` in the target namespace or Kubernetes cluster.
Then, <%= vars.product_short %> automatically creates `TanzuMySQLBackup` resources for all
identifiable* backup artifacts in the external blobstore.

To restore to a different namespace or Kubernetes cluster, you create a
BackupLocation in the target namespace:

1. Target the destination cluster or namespace.

1. Create a TanzuMySQLBackupLocation resource that contains the backup artifact to restore.
   For how to do this, see [Create a TanzuMySQLBackupLocation Resource](#create-backuplocation).


1. Confirm that the TanzuMySQLBackup artifact to restore is included in the list by running:

    ```
    kubectl get tanzumysqlbackup
    ```
   For example:
   <pre class='terminal'>
   $ kubectl get tanzumysqlbackup
     NAME            STATUS      TIME SCHEDULED                TIME STARTED                  TIME COMPLETED                AGE
     sample-backup   Succeeded   2020-12<%# Use &ndash; for a range, not a regular dash. %>-01T21:49:26.138676Z   2020-12<%# Use &ndash; for a range, not a regular dash. %>-01T21:49:26.148835Z   2020-12<%# Use &ndash; for a range, not a regular dash. %>-01T21:49:30.609250Z   5d17h
   </pre>

1. Trigger a restore by following steps in [Restore from a Backup](#restore-from-backup).

### Troubleshooting Backup and Restore <%# Make H2 and H3 headers anchors. Use "a id" to include the anchor in the subnav. Use "a name" to leave it out. %>

Detect potential failures or issues by monitoring the `STATUS` column of any Tanzu MySQL custom
resource. If the status is `Failed`, or if it seems to be stuck in `Pending`, `Scheduled`, or
`Running`, this may<%# "can" usually works better. Use "might" to convey possibility. %> be indicative of a misconfiguration, possible issues with the external
blobstore,<%# If this sentence contains a list, reformat the list as bullets. If the sentence is just rambling, break it up into small sentences. %> or issues with the Tanzu MySQL Operator. For example:
```
$ kubectl get tanzumysqlbackup backup-sample
NAME            STATUS   TIME SCHEDULED                TIME STARTED   TIME COMPLETED   AGE
backup-sample   Failed   2020-12-09T18:28:23.339156Z                                   2m44s
```

You can further diagnose the issue by inspecting the Kubernetes events of the resource in question.
For example:
```
$ kubectl get events --field-selector involvedObject.name=backup-sample
LAST SEEN   TYPE      REASON   OBJECT                           MESSAGE
2m43s       Warning   Failed   tanzumysqlbackup/backup-sample   Secret "backuplocation-sample-creds" not found
```

You can read the message in the `MESSAGE` column to understand why the failure occurred. In this
example, the `backup-sample` expected<%# Consider replacing with "in most cases" to sound more confident. %> a Kubernetes secret called `backuplocation-sample-creds` to
exist. You can fix the problem by creating the `backuplocation-sample-creds` secret. The template
for this secret is located in the `backuplocation.yaml` template.

===== END JUDY NOTES =====

<%= partial '../../mysql-k8s/partials/mysql-k8s/product-beta-warning' %>

DEVELOPER-FACING DOCSET

<strong><%= modified_date %></strong>

This topic describes how to deploy and delete <%= vars.product_full %> instances.

## <a id='prereq'></a>Prerequisites
Prerequisites

* Kubectl<%# First use: "Kubernetes command line tool (kubectl)". Subsequent uses: "kubectl". %> CLI
* Developers must have permissions in order to<%# "to" is preferred. %> perform the following actions to all custom resources under the mysql.tanzu.vmware.com Kubernetes API group:
  * c<%# Bullet points start with uppercase letters. %>reate
  * d<%# Bullet points start with uppercase letters. %>elete
  * d<%# Bullet points start with uppercase letters. %>eletecollection
  * g<%# Bullet points start with uppercase letters. %>et
  * l<%# Bullet points start with uppercase letters. %>ist
  * p<%# Bullet points start with uppercase letters. %>atch
  * u<%# Bullet points start with uppercase letters. %>pdate
  * w<%# Bullet points start with uppercase letters. %>atch

## <a id='create-instance'></a>Create a <%= vars.product_short %> instance
Create a <%= vars.product_short %> instance

1. Target development NAMESPACE where they want to create the <%= vars.product_short %> instances
1. Create the secret:

kubectl --namespace=[TANZU-MYSQL-OPERATOR-NAMESPACE] create secret docker-registry tanzu-mysql-image-registry --docker-server=[REGISTRY-SERVER-URL] --docker-username=[DOCKER-USERNAME] --docker-password=[DOCKER-PASSWORD]

This Kubernetes secret can point to the TanzuNet registry, or a private registry that you have configured for your Kubernetes environment. If you do not have access to the registry credentials, you must contact your kubernetes administrator<%# "admin" is preferred. %> to have these set up for you in your NAMESPACE.

### <a id='create-yaml'></a>Create a `tanzumysql.yaml` file.
* Create a `tanzumysql.yaml` file. This is the configuration file for the <%= vars.product_short %> instance.

    ```
    apiVersion: mysql.tanzu.vmware.com/v1alpha1
    kind: TanzuMySQL
    metadata:
      name: tanzumysql-sample
    spec:
      storageSize: 1Gi
      imagePullSecret: tanzu-mysql-image-registry

    #### <%# Delete the spaces before this header. %> Set the storage class name to change storage class of the PVC associated with this resource
    #  storageClassName: standard

    #### <%# Delete the spaces before this header. %> Examples to set resource limit/request for mysql/backup pods.

    #  resources:

    #### <%# Delete the spaces before this header. %> This is the container running the mysql server.
    #    mysql:
    #      limits:
    #        cpu: 3
    #        memory: 800Mi
    #      requests:
    #        cpu: 2
    #        memory: 500Mi
    #### <%# Delete the spaces before this header. %> This is the sidecar container that takes a backup and streams to the storage backend.
    #    backups:
    #      limits:
    #        cpu: 2
    #        memory: 500Mi
    #      requests:
    #        cpu: 1
    #        memory: 200Mi
    ```

* Talk about the values you can set in `tanzumysql.yaml`

<table class="nice">
<th>Property</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
<th>Example</th>
<th>Required?</th>
<tr>
  <td>metadata.name</td>
  <td>String</td>
  <td>None</td>
  <td>The name of your TanzuMySQL instance. Must be unique within a namespace. Is required when creating resources, although some resources may<%# "can" usually works better. Use "might" to convey possibility. %> allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. For more information, see http://kubernetes.io/docs<%# "documentation" is preferred. %>/user-guide/identifiers#names</td>
  <td>my-instance</td>
  <td>Yes</td>
</tr>
<tr>
  <td>spec<%# "specifications" is preferred. %>.storageSize</td>
  <td></td>
  <td>None</td>
  <td>StorageSize specifies the size of the persistent volume claims for the <%= vars.product_short %> pods. Unit of measure can be<%# Consider switching to active voice. %> M for Megabyte, for example. For more information about what units are expected<%# Consider replacing with "in most cases" to sound more confident. %> for persistent volume claim sizes, see <a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/resources.md#resource-quantities">this Github<%# The brand name is "GitHub". %> page</a>. <%# Type "in GitHub" somewhere in the cross-reference sentence. %>

  </td>
  <td>50Gi</td>
  <td>Yes</td>
</tr>
<tr>
  <td>spec<%# "specifications" is preferred. %>.imagePullSecret</td>
  <td>String</td>
  <td>None</td>
  <td>Refers to an existing Kubernetes docker-registry secret that can access the registry that contains the TanzuMySQL image.</td>
  <td>tanzu-mysql-image-registry</td>
  <td>Yes</td>
</tr>
<tr>
  <td>spec<%# "specifications" is preferred. %>.storageClassName</td>
  <td>String</td>
  <td>Standard</td>
  <td>Specifies the StorageClass for the persistent volume claims for the <%= vars.product_short %> pods. For the types of StorageClasses available, contact your Kubernetes administrator<%# "admin" is preferred. %>. For more information about the Kubernetes StorageClass concept, see this doc<%# "documentation" is preferred. %>:https://kubernetes.io/docs<%# "documentation" is preferred. %>/concepts/storage/storage-classes/</td>
  <td>standard</td>
  <td>No</td>
</tr>
<tr>
  <td>spec<%# "specifications" is preferred. %>.resources.mysql</td>
  <td>
    <ul>
      <li>limits.cpu<%# "CPU" is preferred. %></li>
      <li>limits.memory</li>
    </ul>
  </td>
  <td>Best Effort</td>
  <td>Describes the maximum amount of compute resources (CPU, Memory) allowed for the MySQL container. If left blank, Kubernetes will<%# Avoid "will": present tense is preferred. %> do best effort to allocate necessary compute resources for the MySQL container. For more information, see: https://kubernetes.io/docs<%# "documentation" is preferred. %>/concepts/configuration/manage-resources-containers/</td>
  <td>limits.cpu<%# "CPU" is preferred. %>: 3 , limits.memory: 800Mi</td>
  <td>No</td>
</tr>
<tr>
  <td>spec<%# "specifications" is preferred. %>.resources.mysql</td>
  <td>
    <ul>
      <li>requests.cpu<%# "CPU" is preferred. %></li>
      <li>requests.memory</li>
    </ul>
  </td>
  <td>Best Effort</td>
  <td>Describes the minimum amount of compute resources (CPU, Memory) allowed for the MySQL container. If left blank, it defaults to Limits if that is explicitly specified. For more information, see: https://kubernetes.io/docs<%# "documentation" is preferred. %>/concepts/configuration/manage-resources-containers/</td>
  <td>requests.cpu<%# "CPU" is preferred. %>: 2 , requests.memory: 500Mi</td>
  <td>No</td>
</tr>
<tr>
  <td>spec<%# "specifications" is preferred. %>.resources.backups</td>
  <td>
    <ul>
      <li>limits.cpu<%# "CPU" is preferred. %></li>
      <li>limits.memory</li>
    </ul>
  </td>
  <td>Best Effort</td>
  <td>Describes the maximum amount of compute resources (CPU, Memory) allowed for the backups container. If left blank, Kubernetes will<%# Avoid "will": present tense is preferred. %> do best effort to allocate necessary compute resources for the backups container. For more information, see: https://kubernetes.io/docs<%# "documentation" is preferred. %>/concepts/configuration/manage-resources-containers/</td>
  <td>limits.cpu<%# "CPU" is preferred. %>: 2 , limits.memory: 500Mi</td>
  <td>No</td>
</tr>
<tr>
  <td>spec<%# "specifications" is preferred. %>.resources.backups</td>
  <td>
    <ul>
      <li>requests.cpu<%# "CPU" is preferred. %></li>
      <li>requests.memory</li>
    </ul>
  </td>
  <td>Best Effort</td>
  <td>Describes the minimum amount of compute resources (CPU, Memory) allowed for the backups container. If left blank, it defaults to Limits if that is explicitly specified. For more information, see: https://kubernetes.io/docs<%# "documentation" is preferred. %>/concepts/configuration/manage-resources-containers/</td>
  <td>requests.cpu<%# "CPU" is preferred. %>: 1 , requests.memory: 200Mi</td>
  <td>No</td>
</tr>
</table>

## <a id='deploy-instance'></a>Deploy Instance to Kubernetes
* k<%# Bullet points start with uppercase letters. %>ubectl -n YOUR_NAMESPACE apply -f tanzumysql.yaml<%# "YAML" is preferred. %>
* Verify that is was successfully created:
kubectl get tanzumysql INSTANCE_NAME



## <a id='delete-instance'></a>Delete a <%= vars.product_short %> instance
Delete a <%= vars.product_short %> instance

    kubectl -n YOUR_NAMESPACE delete tanzumysql INSTANCE_NAME

* If you want, also delete the Persistent Volume Claim (PVC).
1. Review your PVCs

    `kubectl get pvc`

1. `kubectl delete pvc POD_NAME` for each pod<%# "Pod" is capitalized per the K8s docs style. %> in the <%= vars.product_short %> instance.

WARNING<%# "Warning" is preferred. %>: This is a destructive action. If you destroy your PVC, you are deleting all associated data with your <%= vars.product_short %> database.


NOTE: If you delete the Pod or Statefulset<%# "StatefulSet" is the K8s docs style. %> associated with the <%= vars.product_short %> resource, a <%= vars.product_short %> controller will<%# Avoid "will": present tense is preferred. %> recreate<%# "re-create" is preferred. %> it for you. If you want to<%# Maybe replace with just "To". %> permanently delete the instance, you need to delete the `tanzumysql` resource.



Removed from restoring:

*: Backup artifacts in blobstores are identified as TanzuMySQL backups using object metadata.

WHY IS this important? Wouldn't you have to make some effort to un-identify a backup?
