---
title: Updating a TanzuMySQL Instance
owner: MySQL
---

<%= partial '../../mysql-k8s/partials/mysql-k8s/product-beta-warning' %>

<strong><%= modified_date %></strong>

This topic describes how to scale or change configurations on a
<%= vars.product_full %> instance.

## <a id='prereq'></a>Prerequisites

Before you update the <%= vars.product_short %> instance, you must have:

* **Access and permissions to the <%= vars.product_short %> instance.**

* **The Kubernetes Command Line Interface (kubectl) installed:**
For more information, see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/).


## <a id='scale-storage'></a>Scale storageSize

For storage classes that support `storageSize`, you can expand the `storageSize`
but not reduce it.

To scale `storageSize`:

1. Look up the storage class associated with the MySQL Podâ€™s Persistent Volume Claim (PVC).
  <pre><code>kubectl get pvc mysql-data-MYSQL-POD-NAME -o jsonpath='{.spec.storageClassName}'</code></pre>

1. Check if the storage class allows volume expansion.
Look for the `ALLOWVOLUMEEXPANSION` column by running:
<pre><code>kubectl get storageclass standard</code></pre>
For example:
<pre class="terminal">$ kubectl get storageclass standard
NAME                 PROVISIONER            RECLAIMPOLICY   VOLUMEBINDINGMODE    ALLOWVOLUMEEXPANSION   AGE
standard (default)   kubernetes.io/gce-pd   Delete          Immediate            true                   91s</pre>

1. If the output does not show the `ALLOWVOLUMEEXPANSION` column, run:
  <pre><code>kubectl get storageclasses.storage.k8s.io standard \
    -o custom-columns='NAME:.metadata.name,ALLOWVOLUMEEXPANSION:.allowVolumeExpansion'</code></pre>

1. If you are using Kubernetes v1.11 and volume expansion is supported, change the `allowVolumeExpansion` field to `true`
      in StorageClass objects. Only PVCs created from a StorageClass with `allowVolumeExpansion`
      set to `true` are allowed to perform volume expansion.
      For more information, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#expanding-persistent-volumes-claims).

<%# Is running this command all you need to do to increase the volume size? %>
1. Edit the PVC `spec.resources.requests.storage` field to increase the volume size by running:
<pre><code>kubectl edit pvc mysql-data-MYSQL-POD-NAME</code></pre>
For example:
<pre class="terminal">$ kubectl edit pvc mysql-data-MYSQL-POD-NAME
persistentvolumeclaim/mysql-data-MYSQL-POD-NAME edited</pre>

1. Do one of the following:
    * **If the storageClass supports online expansion:**
      Wait for the PVC to automatically resize. For more information, see the
      [Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#resizing-an-in-use-persistentvolumeclaim).<br><br>
    * **Otherwise:** Wait for the PVC to have the `FileSystemResizePending` condition.
    Delete the Pod to unmount the PVC and allow it to resize.
    <pre><code>kubectl wait --for=condition=FileSystemResizePending pvc/mysql-data-MYSQL-POD-NAME</code></pre>
    <pre><code>kubectl rollout restart statefulset MYSQL-INSTANCE-NAME</code></pre>
    For example:
    <pre class="terminal">$ kubectl wait --for=condition=FileSystemResizePending pvc/mysql-data-MYSQL-POD-NAME
    persistentvolumeclaim/mysql-data-tanzumysql-sample-0 condition met <br>
    $ kubectl rollout restart statefulset MYSQL-INSTANCE-NAME
    statefulset.apps/tanzumysql-sample restarted</pre>

1. After the StatefulSet controller has automatically re-created the Pod, and the Pod
has successfully restarted, verify that the storage has been resized.
<pre><code>kubectl exec MYSQL-POD-NAME -c mysql -- df -h /var/lib/mysql</code></pre>
For example:
<pre class="terminal">$ kubectl exec MYSQL-POD-NAME -c mysql -- df -h /var/lib/mysql
Filesystem      Size  Used Avail Use% Mounted on
/dev/sdb        3.0G  346M  2.6G  12% /var/lib/mysql</pre>

### <a id='scale-storage-downtime'></a>Expected Downtime When Scaling storageSize

The expected downtime when expanding storage is as follows:

- **With online expansion:** There is no downtime expected in most cases.
- **With offline expansion:** There is downtime while the Pod is re-created and the
PVC is being resized.

## <a id='scale-resources'></a>Scale CPU and Memory Resources

To scale CPU or memory resources:

<%# Is running this command all you need to do to increase the resources?
Does this command just apply an edit you have made somewhere else?
It seems to be the same command as the one for changing imagePullSecret. %>
1. Edit the Tanzu MySQL configuration's `spec.resources` field to increase the CPU
or memory requirements for the `mysql` or `backups` containers.
  <pre><code>kubectl edit tanzumysql MYSQL-INSTANCE-NAME</code></pre>
  For example:
  <pre class="terminal">$ kubectl edit tanzumysql MYSQL-INSTANCE-NAME
  tanzumysql.mysql.tanzu.vmware.com/MYSQL-INSTANCE-NAME edited</pre>

### <a id='scale-resources-downtime'></a>Expected Downtime When Scaling CPU and Memory Resources

The expected downtime when changing resource reservations is as follows:

- Brief downtime while Kubernetes re-creates the Pods.
- Risk of longer downtime if the new requested values exceed the available capacity
of the Kubernetes cluster.

## <a id='other-config'></a>Change Other Configurations

Changing `storageClassName` or `imagePullSecret` does not have any effect on a
running TanzuMySQL instance.
If a TanzuMySQL instance is not running due to errors in these fields, you can change them.
The changes are propagated into the StatefulSet to correct the error.

To change `storageClassName` or `imagePullSecret`:

<%# Is running this command all you need to do? %>
1. Edit the Tanzu MySQL configuration `spec`.
<pre><code>kubectl edit tanzumysql MYSQL-INSTANCE-NAME</code></pre>
For example:
<pre class="terminal">$ kubectl edit tanzumysql MYSQL-INSTANCE-NAME
tanzumysql.mysql.tanzu.vmware.com/MYSQL-INSTANCE-NAME edited</pre>
