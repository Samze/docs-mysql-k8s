---
title: Creating and Deleting a Tanzu MySQL Instance
owner: MySQL
---

<%= partial '../../mysql-k8s/partials/mysql-k8s/product-beta-warning' %>

DEVELOPER-FACING DOCSET

<strong><%= modified_date %></strong>

This topic describes how to deploy and delete <%= vars.product_full %> instances.

## <a id='prereq'></a>Prerequisites
Prerequisites

* Kubectl CLI
* Developers must have permissions in order to perform the following actions to all custom resources under the mysql.tanzu.vmware.com Kubernetes API group:
  * create
  * delete
  * deletecollection
  * get
  * list
  * patch
  * update
  * watch

## <a id='create-instance'></a>Create a <%= vars.product_short %> instance
Create a <%= vars.product_short %> instance

1. Target development NAMESPACE where they want to create the <%= vars.product_short %> instances
1. Create the secret:

kubectl --namespace=[TANZU-MYSQL-OPERATOR-NAMESPACE] create secret docker-registry tanzu-mysql-image-registry --docker-server=[REGISTRY-SERVER-URL] --docker-username=[DOCKER-USERNAME] --docker-password=[DOCKER-PASSWORD]

This Kubernetes secret can point to the TanzuNet registry, or a private registry that you have configured for your Kubernetes environment. If you do not have access to the registry credentials, you must contact your kubernetes administrator to have these set up for you in your NAMESPACE.

### <a id='create-yaml'></a>Create a `tanzumysql.yaml` file.
* Create a `tanzumysql.yaml` file. This is the configuration file for the <%= vars.product_short %> instance.

    ```
    apiVersion: mysql.tanzu.vmware.com/v1alpha1
    kind: TanzuMySQL
    metadata:
      name: tanzumysql-sample
    spec:
      storageSize: 1Gi
      imagePullSecret: tanzu-mysql-image-registry

    #### Set the storage class name to change storage class of the PVC associated with this resource
    #  storageClassName: standard

    #### Examples to set resource limit/request for mysql/backup pods.

    #  resources:

    #### This is the container running the mysql server.
    #    mysql:
    #      limits:
    #        cpu: 3
    #        memory: 800Mi
    #      requests:
    #        cpu: 2
    #        memory: 500Mi
    #### This is the sidecar container that takes a backup and streams to the storage backend.
    #    backups:
    #      limits:
    #        cpu: 2
    #        memory: 500Mi
    #      requests:
    #        cpu: 1
    #        memory: 200Mi
    ```

* Talk about the values you can set in `tanzumysql.yaml`

<table class="nice">
<th>Property</th>
<th>Type</th>
<th>Default</th>
<th>Description</th>
<th>Example</th>
<th>Required?</th>
<tr>
  <td>metadata.name</td>
  <td>String</td>
  <td>None</td>
  <td>The name of your TanzuMySQL instance. Must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. For more information, see http://kubernetes.io/docs/user-guide/identifiers#names</td>
  <td>my-instance</td>
  <td>Yes</td>
</tr>
<tr>
  <td>spec.storageSize</td>
  <td></td>
  <td>None</td>
  <td>StorageSize specifies the size of the persistent volume claims for the <%= vars.product_short %> pods. Unit of measure can be M for Megabyte, for example. For more information about what units are expected for persistent volume claim sizes, see <a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/resources.md#resource-quantities">this Github page</a>.

  </td>
  <td>50Gi</td>
  <td>Yes</td>
</tr>
<tr>
  <td>spec.imagePullSecret</td>
  <td>String</td>
  <td>None</td>
  <td>Refers to an existing Kubernetes docker-registry secret that can access the registry that contains the TanzuMySQL image.</td>
  <td>tanzu-mysql-image-registry</td>
  <td>Yes</td>
</tr>
<tr>
  <td>spec.storageClassName</td>
  <td>String</td>
  <td>Standard</td>
  <td>Specifies the StorageClass for the persistent volume claims for the <%= vars.product_short %> pods. For the types of StorageClasses available, contact your Kubernetes administrator. For more information about the Kubernetes StorageClass concept, see this doc:https://kubernetes.io/docs/concepts/storage/storage-classes/</td>
  <td>standard</td>
  <td>No</td>
</tr>
<tr>
  <td>spec.resources.mysql</td>
  <td>
    <ul>
      <li>limits.cpu</li>
      <li>limits.memory</li>
    </ul>
  </td>
  <td>Best Effort</td>
  <td>Describes the maximum amount of compute resources (CPU, Memory) allowed for the MySQL container. If left blank, Kubernetes will do best effort to allocate necessary compute resources for the MySQL container. For more information, see: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</td>
  <td>limits.cpu: 3 , limits.memory: 800Mi</td>
  <td>No</td>
</tr>
<tr>
  <td>spec.resources.mysql</td>
  <td>
    <ul>
      <li>requests.cpu</li>
      <li>requests.memory</li>
    </ul>
  </td>
  <td>Best Effort</td>
  <td>Describes the minimum amount of compute resources (CPU, Memory) allowed for the MySQL container. If left blank, it defaults to Limits if that is explicitly specified. For more information, see: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</td>
  <td>requests.cpu: 2 , requests.memory: 500Mi</td>
  <td>No</td>
</tr>
<tr>
  <td>spec.resources.backups</td>
  <td>
    <ul>
      <li>limits.cpu</li>
      <li>limits.memory</li>
    </ul>
  </td>
  <td>Best Effort</td>
  <td>Describes the maximum amount of compute resources (CPU, Memory) allowed for the backups container. If left blank, Kubernetes will do best effort to allocate necessary compute resources for the backups container. For more information, see: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</td>
  <td>limits.cpu: 2 , limits.memory: 500Mi</td>
  <td>No</td>
</tr>
<tr>
  <td>spec.resources.backups</td>
  <td>
    <ul>
      <li>requests.cpu</li>
      <li>requests.memory</li>
    </ul>
  </td>
  <td>Best Effort</td>
  <td>Describes the minimum amount of compute resources (CPU, Memory) allowed for the backups container. If left blank, it defaults to Limits if that is explicitly specified. For more information, see: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/</td>
  <td>requests.cpu: 1 , requests.memory: 200Mi</td>
  <td>No</td>
</tr>
</table>

## <a id='deploy-instance'></a>Deploy Instance to Kubernetes
* kubectl -n YOUR_NAMESPACE apply -f tanzumysql.yaml
* Verify that is was successfully created:
kubectl get tanzumysql INSTANCE_NAME



## <a id='delete-instance'></a>Delete a <%= vars.product_short %> instance
Delete a <%= vars.product_short %> instance

    kubectl -n YOUR_NAMESPACE delete tanzumysql INSTANCE_NAME

* If you want, also delete the Persistent Volume Claim (PVC).
1. Review your PVCs

    `kubectl get pvc`

1. `kubectl delete pvc POD_NAME` for each pod in the <%= vars.product_short %> instance.

WARNING: This is a destructive action. If you destroy your PVC, you are deleting all associated data with your <%= vars.product_short %> database.


NOTE: If you delete the Pod or Statefulset associated with the <%= vars.product_short %> resource, a <%= vars.product_short %> controller will recreate it for you. If you want to permanently delete the instance, you need to delete the `tanzumysql` resource.
