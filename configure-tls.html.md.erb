---
title: Configuring TLS for a MySQL Instance
owner: MySQL
---

<%= partial '../../mysql-k8s/partials/mysql-k8s/product-beta-warning' %>

<strong><%= modified_date %></strong>

This topic describes how to configure TLS for a MySQL instance.

## <a id='overview'></a>Overview

<%= vars.product_short %> is configured to require an encrypted connection, and
client connections cannot fall back to use an unencrypted connection. By default,
the MySQL server uses a self-signed certificate. Clients can connect to the MySQL server,
but they cannot verify the connection.

To verify the connection to the MySQL server, the MySQL instance can be configured with a TLS certificate and private key.

To configure a MySQL instance for TLS, you must first create
a TLS Secret in the namespace.
There are several ways to create the Secret.
This topic describes two methods:

* Using the Kubernetes Command Line Interface (kubectl).
  See [Create the TLS Secret Manually](#create-tls-secret) below.
* Using cert-manager.
  See [Create TLS Secret with cert-manager](#using-cert-manager) below.

After creating the secret, you add the name of the secret to your copy of the `mysql.yaml` file,
and configure the instance with the updated file, as described in
[Configure MySQL for TLS](#use-tls) below.

For general information about TLS secrets,
see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets).


## <a id='prereq'></a>Prerequisites

Before you configure TLS for a MySQL Instance, you must have:

* **Access and permissions to the MySQL instance.**

* **The Kubernetes Command Line Interface (kubectl) installed:**
  For more information,
  see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/).


## <a id='create-tls-secret'></a>Create the TLS Secret Manually

This procedure describes how to create the TLS Secret using kubectl.
To create the TLS Secret using cert-manager instead,
see [Create TLS Secret with cert-manager](#using-cert-manager) below.

1. Generate a certificate and private key using a certificate manager,
   such as OpenSSL, certstrap, or Let's Encrypt.
   <br><br>
   When creating the certificate, supply the server hostname for the
   subject alternative names (SANs).
   - If the MySQL ServiceType is ClusterIP, the hostnames are localhost and 127.0.0.1.
   - If the MySQL ServiceType is LoadBalancer, hostname is the external DNS name of the load balancer.

1. Create the TLS Secret by running:

    ```
    kubectl -n DEVELOPMENT-NAMESPACE create secret generic TLS-SECRET-NAME \
      --type kubernetes.io/tls \
      --from-file=tls.crt=PATH-TO-CERTIFICATE \
      --from-file=tls.key=PATH-TO-PRIVATE-KEY \
      --from-file=ca.crt=PATH-TO-CERTIFICATE-AUTHORITY
    ```
    Where:
    + `DEVELOPMENT-NAMESPACE` is the namespace for the MySQL instance.
    + `TLS-SECRET-NAME` is the name you choose for the TLS Secret.
    + `PATH-TO-CERTIFICATE` is the file path to the certificate created in the step above.
    + `PATH-TO-PRIVATE-KEY` is the file path to the private key created in the step above.
    + `PATH-TO-CERTIFICATE-AUTHORITY` is the file path to the certificate authority that signed the certificate.

    For example:

    <pre class="terminal">
      $ kubectl -n my-namespace create secret generic mysql-tls-secret \
          --type kubernetes.io/tls \
          --from-file=tls.crt=/path/server.crt \
          --from-file=tls.key=/path/server.key \
          --from-file=ca.crt=/path/server_ca.crt
    </pre>

## <a id='using-cert-manager'></a>Create TLS Secret with cert-manager

This procedure describes how to create the TLS Secret using cert-manager.

To create the TLS Secret through the kubectl instead,
see [Create the TLS Secret Manually](#create-tls-secret) above.

**Prerequisite:** Before you install cert-manager, you must have the Helm v3 command-line tool installed.
For information about installing Helm, see the
[Helm documentation](https://helm.sh/docs/intro/install/).

1. Install cert-manager on your Kubernetes cluster by running these commands:

    ```
    kubectl create namespace cert-manager
    helm repo add jetstack https://charts.jetstack.io
    helm repo update
    helm install cert-manager jetstack/cert-manager \
    --namespace cert-manager --version v1.0.2 --set installCRDs=true
    ```

2. Create an Issuer resource in the `cert-manager` namespace.
   For information about the Issuer types,
   see the [cert-manager documentation](https://cert-manager.io/docs/configuration/).

5.  Choose and record a name for the TLS secret name, for example, `mysql-tls-secret`.

    Use this name as the `spec.secretName` when you create the Certificate resource below.

3. Create a Certificate resource in the same namespace as the MySQL instance.
   Then, cert-manager creates the TLS Secret.
   <br><br>
   When creating the Certificate resource, supply the server hostname for the
   subject alternative names (SANs) using the `spec.dnsNames` and `spec.ipAddresses`
   configuration in the resource.
   - If the MySQL ServiceType is ClusterIP, the DNS is localhost and IP address is 127.0.0.1.
   - If the MySQL ServiceType is LoadBalancer, the DNS is the external DNS name of the load balancer.

    For how to specify the configuration of the Certificate resource,
   see the [cert-manager documentation](https://cert-manager.io/docs/usage/certificate/).

    <p class="note">
       <strong>Note:</strong> Some Issuer types, for example ACME, do not produce a TLS Secret that
         includes the <code>ca.crt</code> key.
    </p>

    For information about troubleshooting certificate creation,
    see the [cert-manager documentation](https://cert-manager.io/docs/faq/troubleshooting/).

4. Verify that the TLS secret created has the `ca.crt` key by running:

    ```
    kubectl -n DEVELOPMENT-NAMESPACE get secret TLS-SECRET-NAME -o jsonpath="{.data['ca\.crt']}"
    ```

    Where:
    * `DEVELOPMENT-NAMESPACE` is the namespace for the MySQL instance.
    * `TLS-SECRET-NAME` is the name you chose for the TLS Secret.

    For example:

    <pre class="terminal">$ kubectl -n my-namespace get secret mysql-tls-secret -o jsonpath="{.data['ca\.crt']}"  </pre> 



## <a id='use-tls'></a>Configure MySQL for TLS

To configure TLS for the MySQL instance:

1. In your copy of the `mysql.yaml` for the MySQL instance, specify `spec.tls.secret.name` as the name
of the TLS Secret created in the namespace.

2. Create or update the MySQL instance by running:

    ```
    kubectl apply -f FILENAME -n DEVELOPMENT-NAMESPACE
    ```
    Where:
    +  `FILENAME` is the name of the configuration file for your MySQL resource.
    +  `DEVELOPMENT-NAMESPACE` is the namespace for the MySQL instance.



## <a id='use-tls'></a>Connect to MySQL over TLS

To allow client connections to verify the MySQL server certificate,
you provide the CA certificate to the app.

To connect an app or other client to the MySQL instance over TLS:


1. Find the certificate authority that signed the TLS certificate.

1. Try connecting to your MySQL instance using an app or through the proxy port:
    + To connect an app to a MySQL instance,
    see [Connecting an App to the MySQL Instance](.//bind-app.html).<br><br>
    + To connect to the MySQL server through the proxy port:
        1. Follow steps 1 and 2 of
        [Connect to the MySQL Server with the Kubernetes API Server](accessing.html#port-forward).
        1. Validate the CA certificate by running a command such as:

            ```
            mysql -h 127.0.0.1 -u root -P 3306 -p${MYSQL_ROOT_PASSWORD} --ssl-mode=VERIFY_CA --ssl-ca=ca.crt
            ```

      1. Validate the hostname of the MySQL server certificate by running a command such as:

            ```
            mysql -h 127.0.0.1 -u root -P 3306 -p${MYSQL_ROOT_PASSWORD} --ssl-mode=VERIFY_IDENTITY --ssl-ca=ca.crt
            ```
