---
title: Tanzu MySQL for Kubernetes Architecture
owner: MySQL
---

<%= partial '../../mysql-k8s/partials/mysql-k8s/product-beta-warning' %>

<strong><%= modified_date %></strong>

This topic provides some architectural information about <%= vars.product_full %> (<%= vars.product_short %>).

## <a id='mysql4k8s-architecture'></a><%= vars.product_short %> Architecture Diagram

<img src="images/architecture-diagram.png" alt="A diagram showing the architecture of <%= vars.product_short %> with the operator deployment and app namespace">

[Click here to view a larger version of this image.](./images/architecture-diagram.png)

## <a id='controllers-crds'></a>Controllers and Custom Resource Definitions (CRDs)

<%= vars.product_short %> provides extensions to the Kubernetes API through custom resources.
Five separate custom resources are provided by the product:

+ [TanzuMySQL](#mysql) - Managed MySQL instance
+ [TanzuMySQLBackupLocation](#mysqlbackuplocation) - Define an S3 storage bucket for backups
+ [TanzuMySQLBackup](#mysqlbackup) - Request for a backups
+ [TanzuMySQLBackupSchedule](#mysqlbackupschedule)
+ [TanzuMySQLRestore](#mysqlrestore)

###<a id="mysql"></a> TanzuMySQL - Managed Tanzu MySQL Instance

Applying this resource causes the operator to create a Statefulset with a single Pod with two containers.
One container runs the MySQL database software, and the other runs components to support backups.

A Kubernetes `Service` with a service type of `ClusterIP` is created to route connections to the Pod.

  ```
  $ kubectl apply -f - <<EOF
  ---
  apiVersion: mysql.tanzu.vmware.com/v1alpha1
  kind: TanzuMySQL
  metadata:
    name: tanzumysql-sample
  spec:
    resources:
      mysql:
        requests:
          memory: 1Gi
    storageSize: 1Gi
    imagePullSecret: tanzu-mysql-image-registry
  EOF
  ```

After applying this resource, the <%= vars.product_short %> operator creates
the low-level Kubernetes resources to run this Tanzu MySQL instance.

The status of the instance can be seen by running `kubectl get tanzumysqls.mysql.tanzu.vmware.com`.
Initially, this instance is in a pending state:

  ```
  $ kubectl get tanzumysqls.mysql.tanzu.vmware.com
  NAME                READY   STATUS    AGE
  tanzumysql-sample           Pending   2s
  ```

Later, the instance transitions to a running state:

  ```
  $ kubectl get tanzumysqls.mysql.tanzu.vmware.com
  NAME                READY   STATUS    AGE
  tanzumysql-sample   true    Running   27s
  ```

### <a id="mysqlbackuplocation"></a> TanzuMySQLBackupLocation - Define an S3 Storage Bucket for Backups

This resource describes metadata and credentials for storing backups in an S3-compatible object store.

  TanzuMySQLBackup resources reference this backup location to know where to save backup artifacts.

  ```
  ---
  apiVersion: v1
  kind: Secret
  metadata:
    name: backuplocation-sample-creds
  stringData:
    # S3 Credentials
    accessKeyId: "my-s3-access-key-id"
    secretAccessKey: "my-s3-secret-access-key"
  ---
  apiVersion: mysql.tanzu.vmware.com/v1alpha1
  kind: TanzuMySQLBackupLocation
  metadata:
    name: backuplocation-sample
  spec:
    storage:
      # For S3 or Minio:
      s3:
        bucket: "s3bucket"
        bucketPath: "optional/prefix/for/backup/objects/"
        region: "us-east-1"
        endpoint:  "" # optional, default to AWS
        forcePathStyle: false
        disableSSL: false
        secret:
          name: backuplocation-sample-creds
  EOF
  ```

Credentials for S3 are stored in a Kubernetes secret with the keys `accessKeyId`, `secretAccessKey`.


Required fields:

  - bucket; Name of the storage bucket for this backup location
  - secret.name; Name of a secret containing the S3 endpoint credentials

Optional fields:

  - bucketPath
  - region (defaults to us-east-1)
  - endpoint (defaults to aws, may be specified for non-AWS S3 endpoints, e.g. minio)
  - forcePathStyle - whether to use path-style S3 URLs for compatibility (default: use virtual hosted-style S3 urls)
  - disableSSL - for dev environments, may disable SSL for the endpoint (Not recommended for production)

TanzuMySQLBackupLocation resources do not currently have any associated status,
but can be listed via `kubectl`.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqlbackuplocations.mysql.tanzu.vmware.com
NAME                    AGE
backuplocation-sample   2m38s
</pre>

### <a id='mysqlbackup'></a> TanzuMySQLBackup - Request for a backups

[//]: # (REQUEST for a backup or for backups?)

This resource requests that a backup be taken as soon as possible.
This triggers the Tanzu MySQL instance to run
the Percona XtraBackup utility and upload a backup artifact to the blobstore.
For example:

<pre class='terminal'>
$ kubectl apply -f - <<<span>E</span>OF
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLBackup
metadata:
  name: backup-sample
spec:
  location:
    name: backuplocation-sample
  cluster:
    name: tanzumysql-sample
EOF
</pre>

Status of the backup can be observed via kubectl.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqlbackups.mysql.tanzu.vmware.com
NAME            STATUS      TIME SCHEDULED                TIME STARTED                  TIME COMPLETED                AGE
backup-sample   Succeeded   2020-12-07T15:52:12.065092Z   2020-12-07T15:52:12.279522Z   2020-12-07T15:52:16.041156Z   8s
</pre>

###<a id="mysqlbackupschedule"></a> TanzuMySQLBackupSchedule

This resource defines a schedule on which TanzuMySQLBackup resources should be created.
For example:

<pre class='terminal'>
$ kubectl apply -f - <<<span>E</span>OF
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLBackupSchedule
metadata:
  name: tanzumysqlbackupschedule-sample
spec:
  backupTemplate:
    spec:
      location:
        name: backuplocation-sample
      cluster:
        name: tanzumysql-sample
  schedule: "@daily"
EOF
</pre>

TanzuMySQLBackupSchedule resources do not currently have any associated status,
but can be listed via `kubectl`.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqlbackupschedules.mysql.tanzu.vmware.com
NAME                              AGE
tanzumysqlbackupschedule-sample   8s
</pre>

###<a id="mysqlrestore"></a> TanzuMySQLRestore

This resource requests that the contents of a previously created backup artifact be restored,
and a new Tanzu MySQL instance created.
For example:

<pre class='terminal'>
$ kubectl apply -f - <<<span>E</span>OF
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLRestore
metadata:
  name: tanzumysqlrestore-sample
spec:
  tanzuMysqlBackup:
    name: backup-sample
  tanzuMysqlTemplate:
    metadata:
      name: tanzumysql-sample
    spec:
      storageSize: 1Gi
      imagePullSecret: tanzu-mysql-image-registry
EOF
</pre>

Status of the restore can be observed through kubectl.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqlrestores.mysql.tanzu.vmware.com
NAME                       STATUS    TIME STARTED                  TIME COMPLETED   AGE
tanzumysqlrestore-sample   Running   2020-12-07T15:56:26.000000Z                    10s
</pre>

[//]: # (WHAT is the significance of ""takes time"? Is there an estimate? )
The restore takes time to retrieve and unpack the backup artifact and create the TanzuMySQL instance.
The recovery time is proportional to the size of the backup artifact.
For example:
<pre class='terminal'>
$ kubectl get tanzumysqlrestores.mysql.tanzu.vmware.com
NAME                       STATUS      TIME STARTED                  TIME COMPLETED                AGE
tanzumysqlrestore-sample   Succeeded   2020-12-07T15:56:26.000000Z   2020-12-07T15:56:41.765479Z   20s
</pre>


[//]: # (WHAT is this sentence trying to say?)
After the restore has completed successfully, the created TanzuMySQL instance will also have been created and in a
  ready state.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqls.mysql.tanzu.vmware.com
NAME                READY   STATUS    AGE
tanzumysql-sample   true    Running   30s
</pre>
