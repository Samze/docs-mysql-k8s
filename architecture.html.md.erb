---
title: Architecture
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic provides some architectural information about <%= vars.product_full %> (<%= vars.product_short %>).

## <a id='mysql4k8s-architecture'></a><%= vars.product_short %> Architecture


[//]: # (Introduce the two kinds of architecture, compare and contrast, discuss how HA is typically only used in a product environment, the general differences in how to set them.)

### <a id='single-node'></a> Architecture of a MySQL Instance, Single Database

The diagram below shows the architecture of <%= vars.product_short %>:
<img src="images/architecture-diagram.png" alt="A diagram showing the architecture of <%= vars.product_short %> with the Operator deployment and app namespace">

<a href="./images/architecture-diagram.png" target="_blank" aria-hidden="true">Click here to view a larger version of this diagram</a>
<%# It would be valuable to have some text describing this diagram. %>

### <a id='ha-diagram'></a> Architecture of an HA MySQL Instance

High availability offers automatic failover, ensuring that app requests operate continuously
and without extended downtime.

<%= vars.product_short %> uses InnoDB Cluster to provide a highly-available MySQL instance on Kubernetes.
For detailed information about InnoDB Cluster features,
see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/mysql-innodb-cluster-introduction.html).

The diagram below shows the architecture of an HA MySQL instance:

<img src="images/mysql4k8s-ha-arch-diagram.jpg" alt="HA MySQL cluster: A diagram showing the high-availability architecture.
This diagram is described in the text below.">

<a href="./images/mysql4k8s-ha-arch-diagram.jpg" target="_blank" aria-hidden="true">Click here to view a larger version of this diagram</a>

In a <%=vars.product_short %> high-availability (HA) instance,
the topology consists of five pods:

+ One primary MySQL database pod
+ Two secondary MySQL database failover pods
+ Two proxy pods

The primary database is a read-write database.
The two secondary databases are read-only.
InnoDB Cluster ensures that data is synchronously replicated
from the primary to the secondary database pods.
If the primary pod becomes unresponsive, app requests are redirected to a secondary pod,
which gets promoted to primary.
All app requests continue to that promoted primary,
and a new secondary mysql pod is created to replace the failed pod.

If a proxy pod fails, Kubernetes directs traffic to the remaining proxy pod
while recreating the failed pod in the background.
## <a id='controllers-crds'></a>Controllers and Custom Resource Definitions (CRDs)

<%= vars.product_short %> provides extensions to the Kubernetes API through custom resources.
The product provides five separate custom resources:

+ [MySQL](#mysql): A managed MySQL instance
+ [MySQLBackupLocation](#mysqlbackuplocation): Defines an S3 storage bucket for backups
+ [MySQLBackup](#mysqlbackup): Requests for a backup
+ [MySQLBackupSchedule](#mysqlbackupschedule): Defines a backup schedule
+ [MySQLRestore](#mysqlrestore): Requests to restore data

###<a id="mysql"></a> MySQL

Applying this resource causes the Kubernetes Operator to create a StatefulSet with a single Pod
with two containers.
One container runs the MySQL database software, and the other runs components to support backups.

The MySQL Pod mounts a Persistent Volume Claim (PVC) which holds the MySQL data.

When a MySQL instance is created, the Tanzu MySQL Operator automatically creates a Kubernetes service
with a service type of `ClusterIP` which routes connections to the MySQL Pod.

  ```
  ---
  apiVersion: with.sql.tanzu.vmware.com/v1
  kind: MySQL
  metadata:
    name: mysql-sample
  spec:
    resources:
      mysql:
        requests:
          memory: 1Gi
    storageSize: 1Gi
    imagePullSecret: tanzu-mysql-image-registry
  ```

After applying this resource, the Operator creates
the low-level Kubernetes resources to run this MySQL instance.

You can see the status of the instance by running:

```
kubectl get mysqls.with.sql.tanzu.vmware.com
```

Initially, this instance is in a pending state:

<pre class="terminal">
$ kubectl get mysqls.with.sql.tanzu.vmware.com
NAME           READY   STATUS    AGE
mysql-sample           Pending   2s
</pre>

Later, the instance transitions to a running state:

<pre class="terminal">
$ kubectl get mysqls.with.sql.tanzu.vmware.com
NAME           READY   STATUS    AGE
mysql-sample   true    Running   27s
</pre>

### <a id="mysqlbackuplocation"></a> MySQLBackupLocation

This resource describes metadata and credentials for storing backups in an S3-compatible object store.

MySQLBackup resources reference this backup location to know where to save backup artifacts.
The Operator creates or maintains a MySQLBackup resource for every artifact found in the backup location.
Consequently, creating a MySQLBackupLocation that contains existing artifacts generates new, corresponding MySQLBackup resources.

  ```
  ---
  apiVersion: v1
  kind: Secret
  metadata:
    name: backuplocation-sample-creds
  stringData:
    # S3 Credentials
    accessKeyId: "my-s3-access-key-id"
    secretAccessKey: "my-s3-secret-access-key"
  ---
  apiVersion: with.sql.tanzu.vmware.com/v1
  kind: MySQLBackupLocation
  metadata:
    name: backuplocation-sample
  spec:
    storage:
      # For S3 or Minio:
      s3:
        bucket: "s3bucket"
        bucketPath: "optional/prefix/for/backup/objects/"
        region: "us-east-1"
        endpoint:  "" # optional, default to AWS
        forcePathStyle: false
        secret:
          name: backuplocation-sample-creds
  ```

Credentials for S3 are stored in a Kubernetes secret with the keys `accessKeyId`, `secretAccessKey`.
MySQLBackupLocation resources do not currently have any associated status,
but you can list them using kubectl.
For example:

<pre class='terminal'>
$ kubectl get mysqlbackuplocations.with.sql.tanzu.vmware.com
NAME                    AGE
backuplocation-sample   2m38s
</pre>

### <a id='mysqlbackup'></a> MySQLBackup

This resource triggers the instance to run the Percona XtraBackup utility and
upload a backup artifact to the blobstore.
Blobstore artifacts are represented as MySQLBackup resources for subsequent restore.
The resource requests for a backup to be taken as soon as possible.
For a resource that requests a scheduled backup,
see [MySQLBackupSchedule](#mysqlbackupschedule) below.
For example:

```
---
apiVersion: with.sql.tanzu.vmware.com/v1
kind: MySQLBackup
metadata:
  name: backup-sample
spec:
  location:
    name: backuplocation-sample
  instance:
    name: mysql-sample
```

You can see the status of the backup using kubectl.
For example:

<pre class='terminal'>
$ kubectl get mysqlbackups.with.sql.tanzu.vmware.com
NAME            STATUS      SOURCE INSTANCE   TIME STARTED           TIME COMPLETED
backup-sample   Succeeded   mysql-sample      2020-12-07T15:52:12Z   2020-12-07T15:52:16Z
</pre>

###<a id="mysqlbackupschedule"></a> MySQLBackupSchedule

This resource defines a schedule to automatically create MySQLBackup resources.
For example:

```
---
apiVersion: with.sql.tanzu.vmware.com/v1
kind: MySQLBackupSchedule
metadata:
  name: mysqlbackupschedule-sample
spec:
  backupTemplate:
    spec:
      location:
        name: backuplocation-sample
      instance:
        name: mysql-sample
  schedule: "@daily"
```

MySQLBackupSchedule resources do not currently have any associated status,
but you can list them using kubectl.
For example:

<pre class='terminal'>
$ kubectl get mysqlbackupschedules.with.sql.tanzu.vmware.com
NAME                         AGE
mysqlbackupschedule-sample   8s
</pre>

###<a id="mysqlrestore"></a> MySQLRestore

This resource instructs the Operator to create a new PVC and a new MySQL instance
from an existing MySQLBackup resource.
The backup artifact for the MySQLBackup resource is loaded into the new PVC
before the MySQL database is started.
For example:

```
---
apiVersion: with.sql.tanzu.vmware.com/v1
kind: MySQLRestore
metadata:
  name: restore-sample
spec:
  backup:
    name: backup-sample
  instanceTemplate:
    metadata:
      name: mysql-sample
    spec:
      storageSize: 1Gi
      imagePullSecret: tanzu-mysql-image-registry
```

You can see the status of the restore using kubectl.
For example:

<pre class='terminal'>
$ kubectl get mysqlrestores.with.sql.tanzu.vmware.com
NAME             STATUS    SOURCE BACKUP   TARGET INSTANCE   TIME STARTED           TIME COMPLETED
restore-sample   Running   backup-sample   mysql-sample      2020-12-07T15:56:26Z
</pre>

The restore retrieves and unpacks the backup artifact and creates the MySQL instance.
The restore time is proportional to the size of the backup artifact.
For example:

<pre class='terminal'>
$ kubectl get mysqlrestores.with.sql.tanzu.vmware.com
NAME             STATUS      SOURCE BACKUP   TARGET INSTANCE   TIME STARTED           TIME COMPLETED
restore-sample   Succeeded   backup-sample   mysql-sample      2020-12-07T15:56:26Z   2020-12-07T15:56:41Z
</pre>


At the end of the restore process, you have a MySQL instance with the `READY` state `true`
and with `STATUS` `running`.
For example:

<pre class='terminal'>
$ kubectl get mysqls.with.sql.tanzu.vmware.com
NAME           READY   STATUS    AGE
mysql-sample   true    Running   30s
</pre>
