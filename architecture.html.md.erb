---
title: Tanzu MySQL for Kubernetes Architecture
owner: MySQL
---

<%= partial '../../mysql-k8s/partials/mysql-k8s/product-beta-warning' %>

<strong><%= modified_date %></strong>

This topic provides some architectural information about <%= vars.product_full %> (<%= vars.product_short %>).

## <a id='mysql4k8s-architecture'></a><%= vars.product_short %> Architecture Diagram

The diagram below shows the architecture of <%= vars.product_short %>:
<img src="images/architecture-diagram.png" alt="A diagram showing the architecture of <%= vars.product_short %> with the operator deployment and app namespace">

<a href="./images/architecture-diagram.png" target="_blank" aria-hidden="true">Click here to view a larger version of this diagram</a>
<%# It would be valuable to have some text describing this diagram. %>

## <a id='controllers-crds'></a>Controllers and Custom Resource Definitions (CRDs)

<%= vars.product_short %> provides extensions to the Kubernetes API through custom resources.
The product provides five separate custom resources:

+ [TanzuMySQL](#mysql): A managed MySQL instance
+ [TanzuMySQLBackupLocation](#mysqlbackuplocation): Defines an S3 storage bucket for backups
+ [TanzuMySQLBackup](#mysqlbackup): Requests for a backup
+ [TanzuMySQLBackupSchedule](#mysqlbackupschedule): Defines a backup schedule
+ [TanzuMySQLRestore](#mysqlrestore): Requests to restore data

###<a id="mysql"></a> TanzuMySQL

Applying this resource causes the Kubernetes Operator to create a StatefulSet with a single Pod
with two containers.
One container runs the MySQL database software, and the other runs components to support backups.

The Pod mounts a Persistent Volume Claim (PVC) which holds the MySQL data.

A Kubernetes `Service` with a service type of `ClusterIP` is created to route connections to the Pod.
<%# who/what creates this? does the user have to do this? %>

<pre class="terminal">
$ kubectl apply -f - <span><<</span>EOF
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQL
metadata:
  name: tanzumysql-sample
spec:
  resources:
    mysql:
      requests:
        memory: 1Gi
  storageSize: 1Gi
  imagePullSecret: tanzu-mysql-image-registry
EOF
</pre>

After applying this resource, the operator creates
the low-level Kubernetes resources to run this Tanzu MySQL instance.

You can see the status of the instance by running:

```
kubectl get tanzumysqls.mysql.tanzu.vmware.com
```

Initially, this instance is in a pending state:

<pre class="terminal">
$ kubectl get tanzumysqls.mysql.tanzu.vmware.com
NAME                READY   STATUS    AGE
tanzumysql-sample           Pending   2s
</pre>

Later, the instance transitions to a running state:

<pre class="terminal">
$ kubectl get tanzumysqls.mysql.tanzu.vmware.com
NAME                READY   STATUS    AGE
tanzumysql-sample   true    Running   27s
</pre>

### <a id="mysqlbackuplocation"></a> TanzuMySQLBackupLocation

This resource describes metadata and credentials for storing backups in an S3-compatible object store.

TanzuMySQLBackup resources reference this backup location to know where to save backup artifacts.
The operator creates or maintains a TanzuMySQLBackup resource for every artifact found in the backup location.
Consequently, creating a TanzuMySQLBackupLocation that contains existing artifacts generates new, corresponding TanzuMySQLBackup resources.

<%#
Could we add the following to the below code snippet?

<pre class="terminal">
$ kubectl apply -f - <span><<</span>EOF
%>
```
---
apiVersion: v1
kind: Secret
metadata:
  name: backuplocation-sample-creds
stringData:
  # S3 Credentials
  accessKeyId: "my-s3-access-key-id"
  secretAccessKey: "my-s3-secret-access-key"
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLBackupLocation
metadata:
  name: backuplocation-sample
spec:
  storage:
    # For S3 or Minio:
    s3:
      bucket: "s3bucket"
      bucketPath: "optional/prefix/for/backup/objects/"
      region: "us-east-1"
      endpoint:  "" # optional, default to AWS
      forcePathStyle: false
      disableSSL: false
      secret:
        name: backuplocation-sample-creds
EOF
```

Credentials for S3 are stored in a Kubernetes secret with the keys `accessKeyId`, `secretAccessKey`.

The table below lists the required fields:

<table class="nice">
<col width="25%">
<col width="60%">
  <tr>
    <th colspan="3">Required Fields:</th>
  </tr>
  <tr>
    <th>Name</th>
    <th>Description</th>
    <th>Default</th>
  </tr>
  <tr>
    <td>bucket</td>
    <td>Name of the storage bucket for this backup location</td>
    <td><em>N/A</em></td>
  </tr>
  <tr>
    <td>secret.name</td>
    <td>Name of a secret containing the S3 endpoint credentials</td>
    <td><em>N/A</em></td>
  </tr>
</table>

The table below lists the optional fields:

<table class="nice">
<col width="25%">
<col width="60%">
  <tr>
    <th colspan="3">Optional Fields:</th>
  </tr>
  <tr>
    <th>Name</th>
    <th>Description</th>
    <th>Default</th>
  </tr>
  <tr>
    <td>bucketPath</td>
    <td>Path prefix within the bucket to store backups</td>
    <td>no prefix</td>
  </tr>
  <tr>
    <td>region</td>
    <td>Name of the region where the bucket is located.</td>
    <td>us-east-1</td>
  </tr>
  <tr>
    <td>endpoint</td>
    <td>Setting for non-Amazon S3 endpoints such as Minio</td>
    <td>AWS</td>
  </tr>
  <tr>
    <td>forcePathStyle</td>
    <td>True to use path-style S3 URLs for compatibility or false to use virtual hosted-style S3 URLs</td>
    <td><code>false</code></td>
  </tr>
  <tr>
    <td>disableSSL</td>
    <td>For development environments, you can disable SSL for the endpoint.
      VMware discourages disabling SSL in production.</td>
    <td><code>false</code></td>
  </tr>
</table>

TanzuMySQLBackupLocation resources do not currently have any associated status,
but you can list them using kubectl.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqlbackuplocations.mysql.tanzu.vmware.com
NAME                    AGE
backuplocation-sample   2m38s
</pre>

### <a id='mysqlbackup'></a> TanzuMySQLBackup

This resource triggers the instance to run the Percona XtraBackup utility and
upload a backup artifact to the blobstore.
Blobstore artifacts are represented as TanzuMySQLBackup resources for subsequent restore.
The resource requests for a backup to be taken as soon as possible.
For a resource that requests a scheduled backup,
see [TanzuMySQLBackupSchedule](#mysqlbackupschedule) below.
For example:

<pre class='terminal'>
$ kubectl apply -f - <<<span>E</span>OF
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLBackup
metadata:
  name: backup-sample
spec:
  location:
    name: backuplocation-sample
  cluster:
    name: tanzumysql-sample
EOF
</pre>

You can see the status of the backup using kubectl.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqlbackups.mysql.tanzu.vmware.com
NAME            STATUS      TIME SCHEDULED                TIME STARTED                  TIME COMPLETED                AGE
backup-sample   Succeeded   2020-12-07T15:52:12.065092Z   2020-12-07T15:52:12.279522Z   2020-12-07T15:52:16.041156Z   8s
</pre>

###<a id="mysqlbackupschedule"></a> TanzuMySQLBackupSchedule

This resource defines a schedule to automatically create TanzuMySQLBackup resources.
For example:

<pre class='terminal'>
$ kubectl apply -f - <<<span>E</span>OF
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLBackupSchedule
metadata:
  name: tanzumysqlbackupschedule-sample
spec:
  backupTemplate:
    spec:
      location:
        name: backuplocation-sample
      cluster:
        name: tanzumysql-sample
  schedule: "@daily"
EOF
</pre>

TanzuMySQLBackupSchedule resources do not currently have any associated status,
but you can list them using kubectl.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqlbackupschedules.mysql.tanzu.vmware.com
NAME                              AGE
tanzumysqlbackupschedule-sample   8s
</pre>

###<a id="mysqlrestore"></a> TanzuMySQLRestore

This resource instructs the operator to create a new PVC and a new Tanzu MySQL instance
from an existing TanzuMySQLBackup resource.
The backup artifact for the TanzuMySQLBackup resource is loaded into the new PVC
before the MySQL database is started.
For example:

<pre class='terminal'>
$ kubectl apply -f - <<<span>E</span>OF
---
apiVersion: mysql.tanzu.vmware.com/v1alpha1
kind: TanzuMySQLRestore
metadata:
  name: tanzumysqlrestore-sample
spec:
  tanzuMysqlBackup:
    name: backup-sample
  tanzuMysqlTemplate:
    metadata:
      name: tanzumysql-sample
    spec:
      storageSize: 1Gi
      imagePullSecret: tanzu-mysql-image-registry
EOF
</pre>

You can see the status of the restore using kubectl.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqlrestores.mysql.tanzu.vmware.com
NAME                       STATUS    TIME STARTED                  TIME COMPLETED   AGE
tanzumysqlrestore-sample   Running   2020-12-07T15:56:26.000000Z                    10s
</pre>

The restore retrieves and unpacks the backup artifact and creates the Tanzu MySQL instance.
The restore time is proportional to the size of the backup artifact.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqlrestores.mysql.tanzu.vmware.com
NAME                       STATUS      TIME STARTED                  TIME COMPLETED                AGE
tanzumysqlrestore-sample   Succeeded   2020-12-07T15:56:26.000000Z   2020-12-07T15:56:41.765479Z   20s
</pre>


At the end of the restore process, you have a Tanzu MySQL instance with the `READY` state `true`
and with `STATUS` `running`.
For example:

<pre class='terminal'>
$ kubectl get tanzumysqls.mysql.tanzu.vmware.com
NAME                READY   STATUS    AGE
tanzumysql-sample   true    Running   30s
</pre>
