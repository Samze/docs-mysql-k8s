---
title: VMware Tanzuâ„¢ SQL with MySQL for Kubernetes (Beta)
owner: MySQL
---

<%= partial '../../mysql-k8s/partials/mysql-k8s/product-beta-warning' %>

<strong><%= modified_date %></strong>

This topic provides an overview of <%= vars.product_full %> (<%= vars.product_short %>).

## <a id='about-mysql4k8s'></a>About <%= vars.product_short %>

<%= vars.product_short %> is a Kubernetes operator that automates provisioning, management,
and operations of dedicated MySQL instances running on Kubernetes.
By default, MySQL instances provisioned by <%= vars.product_short %> are configured with
secure and performant settings to meet app developer expectations for a general-use relational
database.

Kubernetes operators are software extensions to Kubernetes that provide custom resources
for management of apps, services, and their components.

The operator provides a consistent way to deploy MySQL instances to Kubernetes and to run them,
including "day two", continuous operations.
MySQL instances deployed using the operator can be used by apps running on
Kubernetes or outside of Kubernetes.

<%= vars.product_short %> packages a collection of open-source software to help you deploy
and manage one or more instances of the MySQL database on Kubernetes.
It includes the following components:

  * [Percona Server 8.0](https://www.percona.com/software/mysql-database/percona-server)
  * [Percona XtraBackup 8.0](https://www.percona.com/software/mysql-database/percona-xtrabackup)


## <a id='about-mysql-8-0'></a>About MySQL 8.0

MySQL is a powerful open-source relational database in use since the mid-90s.
Developers have relied on MySQL as a first step to storing, processing, and sharing data.
As its user community has grown, MySQL has become a robust system
capable of handling a wide variety of use cases and very significant workloads.
Unlike other traditional databases that centralize and consolidate data,
MySQL lends itself to dedicated deployment, which supports building "cloud native" apps.

### <a id='what-is-mysql'></a> More about MySQL

If you are new to MySQL and want general information about what MySQL is,
see the [MySQL documentation](https://dev.mysql.com/doc/refman/8.0/en/what-is-mysql.html).

### <a id='features-mysql-8-0'></a>MySQL 8.0 Features

If you are familiar with older versions of MySQL but new to MySQL 8.0,
then you will want to know about these new features.
The major features of MySQL 8.0 include:

  * Multi-Version Concurrency Control (MVCC)
  * Tablespaces
  * Asynchronous replication
  * Nested transactions (savepoints)
  * Online/hot backups
  * Redo logging for fault tolerance
  * Crash-safe DDL
  * Unicode
  * NoSQL Document Store interface
  * Native JSON datatype
  * Native Geographic Information System (GIS) support

## <a id='mysql4k8s-architecture'></a><%= vars.product_short %> Architecture

<img src="images/architecture-diagram.png" alt="A diagram showing the architecture of <%= vars.product_short %> with the operator deployment and app namespace">

[Click here to view a larger version of this image.](./images/architecture-diagram.png)

### <a id='controllers-crds'></a>Controllers and Custom Resource Definitions (CRDs)

* Controllers and Custom Resource Definitions (CRDs)

<%= vars.product_short %> provides extensions to the Kubernetes API via Custom Resources.  Five separate custom
resources are provided by the product.

* TanzuMySQL - Managed MySQL instance

  Applying this resource will cause the Operator to create a Statefulset with a single Pod with two containers.  One
  container runs the MySQL database software, and the other runs components to support backups.

  A Kubernetes `Service` with a service type of `ClusterIP` is created to route connections to the pod.

  ```
  $ kubectl apply -f - <<EOF
  ---
  apiVersion: mysql.tanzu.vmware.com/v1alpha1
  kind: TanzuMySQL
  metadata:
    name: tanzumysql-sample
  spec:
    resources:
      mysql:
        requests:
          memory: 1Gi
    storageSize: 1Gi
    imagePullSecret: tanzu-mysql-image-registry
  EOF
  ```

  After applying this resource, the <%= vars.product_short %> Operator will create the low-level Kubernetes resources to run this MySQL instance.

  The status of the instance can be seen by running `kubectl get tanzumysqls.mysql.tanzu.vmware.com`.  Initially this
  instance will be in a "Pending" state, and should eventually be in a "Running" state.

  ```
  $ kubectl get tanzumysqls.mysql.tanzu.vmware.com
  NAME                READY   STATUS    AGE
  tanzumysql-sample           Pending   2s
  ```

  ...after some time...

  ```
  $ kubectl get tanzumysqls.mysql.tanzu.vmware.com
  NAME                READY   STATUS    AGE
  tanzumysql-sample   true    Running   27s
  ```

* TanzuMySQLBackupLocation - Define an s3 storage bucket for backups

  This resource describes metadata and credentials for storing backups in an S3-compatible object store.

  TanzuMySQLBackup resources will reference this backup location to know where to save backup artifacts.

  ```
  ---
  apiVersion: v1
  kind: Secret
  metadata:
    name: backuplocation-sample-creds
  stringData:
    # S3 Credentials
    accessKeyId: "my-s3-access-key-id"
    secretAccessKey: "my-s3-secret-access-key"
  ---
  apiVersion: mysql.tanzu.vmware.com/v1alpha1
  kind: TanzuMySQLBackupLocation
  metadata:
    name: backuplocation-sample
  spec:
    storage:
      # For S3 or Minio:
      s3:
        bucket: "s3bucket"
        bucketPath: "optional/prefix/for/backup/objects/"
        region: "us-east-1"
        endpoint:  "" # optional, default to AWS
        forcePathStyle: false
        disableSSL: false
        secret:
          name: backuplocation-sample-creds
  EOF
  ```

  Credentials for s3 are stored in a Kubernetes secret with the keys `accessKeyId`, `secretAccessKey`.


  Required fields:
  - bucket; Name of the storage bucket for this backup location
  - secret.name; Name of a secret containing the s3 endpoint credentials

  Optional fields:
  - bucketPath
  - region (defaults to us-east-1)
  - endpoint (defaults to aws, may be specified for non-AWS s3 endpoints, e.g. minio)
  - forcePathStyle - whether to use path-style s3 URLs for compatibility (default: use virtual hosted-style s3 urls)
  - disableSSL - for dev environments, may disable SSL for the endpoint (Not recommended for production)

  TanzuMySQLBackupLocation resources do not currently have any associated status, but can be listed via `kubectl`

  ```
  $ kubectl get tanzumysqlbackuplocations.mysql.tanzu.vmware.com
  NAME                    AGE
  backuplocation-sample   2m38s
  ```

* TanzuMySQLBackup - Request for a backups

  This resource requests that a backup be taken as soon as possible.  This will trigger the TanzuMySQL instance to run
  the Percona XtraBackup utility and upload a backup artifact to the blobstore.

  ```
  $ kubectl apply -f - <<EOF
  ---
  apiVersion: mysql.tanzu.vmware.com/v1alpha1
  kind: TanzuMySQLBackup
  metadata:
    name: backup-sample
  spec:
    location:
      name: backuplocation-sample
    cluster:
      name: tanzumysql-sample
  EOF
  ```

  Status of the backup can be observed via kubectl:

  ```
  $ kubectl get tanzumysqlbackups.mysql.tanzu.vmware.com
  NAME            STATUS      TIME SCHEDULED                TIME STARTED                  TIME COMPLETED                AGE
  backup-sample   Succeeded   2020-12-07T15:52:12.065092Z   2020-12-07T15:52:12.279522Z   2020-12-07T15:52:16.041156Z   8s
  ```

* TanzuMySQLBackupSchedule

  This resource defines a schedule on which TanzuMySQLBackup resources should be created.

  ```
  $ kubectl apply -f - <<EOF
  ---
  apiVersion: mysql.tanzu.vmware.com/v1alpha1
  kind: TanzuMySQLBackupSchedule
  metadata:
    name: tanzumysqlbackupschedule-sample
  spec:
    backupTemplate:
      spec:
        location:
          name: backuplocation-sample
        cluster:
          name: tanzumysql-sample
    schedule: "@daily"
  EOF
  ```

  TanzuMySQLBackupSchedule resources do not currently have any associated status, but can be listed via `kubectl`

  ```
  $ kubectl get tanzumysqlbackupschedules.mysql.tanzu.vmware.com
  NAME                              AGE
  tanzumysqlbackupschedule-sample   8s
  ```

* TanzuMySQLRestore

  This resource requests that the contents of a previously created backup artifact be restored, and a new TanzuMySQL
  instance created.

  ```
  $ kubeclt apply -f - <<EOF
  ---
  apiVersion: mysql.tanzu.vmware.com/v1alpha1
  kind: TanzuMySQLRestore
  metadata:
    name: tanzumysqlrestore-sample
  spec:
    tanzuMysqlBackup:
      name: backup-sample
    tanzuMysqlTemplate:
      metadata:
        name: tanzumysql-sample
      spec:
        storageSize: 1Gi
        imagePullSecret: tanzu-mysql-image-registry
  EOF
  ```

  Status of the restore can be observed through kubectl

  ```
  $ kubectl get tanzumysqlrestores.mysql.tanzu.vmware.com
  NAME                       STATUS    TIME STARTED                  TIME COMPLETED   AGE
  tanzumysqlrestore-sample   Running   2020-12-07T15:56:26.000000Z                    10s
  ```

  The restore will take some time to retrieve and unpack the backup artifact and create the TanzuMySQL instance.  The
  recovery time will be proportional to the size of the backup artifact.

  ```
  $ kubectl get tanzumysqlrestores.mysql.tanzu.vmware.com
  NAME                       STATUS      TIME STARTED                  TIME COMPLETED                AGE
  tanzumysqlrestore-sample   Succeeded   2020-12-07T15:56:26.000000Z   2020-12-07T15:56:41.765479Z   20s
  ```

  Once the restore has completed successfully, the created TanzuMySQL instance will also have been created and in a
  "Ready" state.

  ```
  $ kubectl get tanzumysqls.mysql.tanzu.vmware.com
  NAME                READY   STATUS    AGE
  tanzumysql-sample   true    Running   30s
  ```

## <a id='rto-rpo-characteristics'></a>RTO and RPO Characteristics
Recovery Time Objective (RTO) and Recovery Point Objective (RPO) are metrics used to assess the availability of a SERVICE/CLUSTER/? during an outage.

### <a id='rto-downtime'></a>Expected Downtime
* Expected downtime for different types of outages - (RTO)
 * Pod gets rescheduled? K8s cluster loses network connectivity? etc.

### <a id='rpo-data-loss'></a>Data Loss
* How much data is lost for different types of outages - (RPO)

## <a id='requirements'></a>Platform Requirements

  <%= vars.product_short %> requires Kubernetes v1.16 or later.

## <a id='license'></a> License
This product is distributed under the
[VMware Pre-Release EULA](https://network.pivotal.io/legal_documents/pivotal_beta_eula) license.

### <a id="gen-limits"></a> General Limitations

* This product is currently in beta. VMware does not provide commercial support.
* This product is intended to be used with any Kubernetes distribution >= 1.16.
  However, given the number of Kubernetes vendors, versions, and configurations, not all of them have been
  tested with <%= vars.product_short %>.
* Product upgrades are not supported. If you want to test a newer version, delete the previous version first.
