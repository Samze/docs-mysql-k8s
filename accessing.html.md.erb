---
title: Accessing a TanzuMySQL Instance
owner: MySQL
---
<% current_page.data.title = "Accessing a " + vars.product_short + " Instance" %>

<%= partial '../../mysql-k8s/partials/mysql-k8s/product-beta-warning' %>

<strong><%= modified_date %></strong>

This topic describes how to access a <%= vars.product_full %> instance.


## <a id='prereq'></a>Prerequisites

Before you access a <%= vars.product_short %> instance, you must have:

* The Kubernetes Command Line Interface (kubectl) installed.
For more information, see the [Kubernetes documentation](https://kubernetes.io/docs/tasks/tools/install-kubectl/).

* An existing <%= vars.product_short %> instance

## <a id='verify-settings'></a> (Optional) Verify MySQL Server Settings

To see all MySQL server settings configured:

1. Log in to the Kubernetes namespace by running:

    ```
    kubectl -n YOUR-NAMESPACE exec --stdin --tty pod/INSTANCE-NAME-0 -- /bin/bash
    ```
    Where:
    * `YOUR-NAMESPACE` is the namespace you are logging in to.
    * `INSTANCE-NAME` is the name of the instance you are targeting.

    For example:

    <pre class="terminal">
    $ kubectl -n my-namespace exec --stdin --tty pod/my-instance-0 -- /bin/bash
    </pre>

1. Review the configuration files named `/etc/mysql/conf.d/base.cnf` and `/etc/mysql/conf.d/autotune.cnf`.

## <a id='server-login'></a> Connect to the MySQL Server from within the Container

To connect to the MySQL server:

1. Log in to the Kubernetes namespace by running:

    ```
    kubectl -n YOUR-NAMESPACE exec --stdin --tty pod/INSTANCE-NAME-0 -- /bin/bash
    ```
    Where:
    * `YOUR-NAMESPACE` is the namespace you are logging in to.
    * `INSTANCE-NAME` is the name of the instance you are targeting.

    For example:

    <pre class="terminal">
    $ kubectl -n my-namespace exec --stdin --tty pod/my-instance-0 -- /bin/bash
    </pre>

1. Log in to the MySQL server by running:

    ```
    mysql -uroot -p$(cat $MYSQL_ROOT_PASSWORD_FILE)
    ```

    For example:

    <pre class="terminal">
    $ mysql -uroot -p$(cat $MYSQL_ROOT_PASSWORD_FILE)
    </pre>

## <a id='off-platform-access'></a> Connect to the MySQL Server with an External IP Address

<p class="note">
  <strong>Note:</strong> Ensure the cloud provider supports external load balancers. For more information about the LoadBalancer ServiceTypes, see the
  <a href="https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer">Kubernetes documentation</a>.
</p>

1. Verify that your <%= vars.product_short %> instance is using a LoadBalancer ServiceType.
You must do this before you can connect to a <%= vars.product_short %> instance off-platform.
For more information about how to specify the property to create the correct service, see [Property Reference for tanzumysql.yml](./property-reference-tanzumysql.html).

1. Create or update the <%= vars.product_short %> instance and verify the Service has Type LoadBalancer instead of the default ClusterIP:

    ```
    $ kubectl get service INSTANCE-NAME -o jsonpath={.spec.type}
    ```
    Where `INSTANCE-NAME` is the value that you configured for metadata.name in the tanzumysql.yaml file.

    For example:

    <pre class="terminal">
    $ kubectl get service tanzumysql-sample -o jsonpath={.spec.type}
    LoadBalancer
    </pre>

1. Find the external IP address allocated for the service.

    ```
    $ kubectl get service INSTANCE-NAME -o jsonpath={.status.loadBalancer.ingress[].ip}
    ```
    Where `INSTANCE-NAME` is the value that you configured for metadata.name in the tanzumysql.yaml file.

    For example:

    <pre class="terminal">
    $ kubectl get service tanzumysql-sample -o jsonpath={.status.loadBalancer.ingress[].ip}
    a4dc8de1biefe13112-17761231.us-west-2.elb.amazonaws.com
    </pre>

1. Get the root password. The root user password is available in the Kubernetes Secret named after
   the TanzuMySQL instance suffixed with `-credentials`.

    ```
    MYSQL_ROOT_PASSWORD=$(kubectl get secret INSTANCE-NAME-credentials -o go-template='{{.data.rootPassword | base64decode}}')
    ```
    Where `INSTANCE-NAME` is the value that you configured for metadata.name in the tanzumysql.yaml file.

1. Log in to the MySQL server by running:

    ```
    mysql -uroot -p$MYSQL_ROOT_PASSWORD -P 3306 -h EXTERNAL-IP
    ```
    Where `EXTERNAL-IP` is the external IP address allocated for the service found in the above step.

    For example:

    <pre class="terminal">
    $ mysql -uroot -p$MYSQL_ROOT_PASSWORD -P 3306 -h a4dc8de1biefe13112-17761231.us-west-2.elb.amazonaws.com
    </pre>

1. To disable off-platform connections, change the <%= vars.product_short %> instance to specify
ClusterIP and update the instance. The cloud provider might automatically delete the load balancer.

## <a id='port-forward'></a> Connect to the MySQL Server with the Kubernetes API Server

<p class="note">
  <strong>Note:</strong> Connecting with <code>kubectl port-forward</code> proxies
  the connection through the API server. It is intended for debugging access, and
  its performance is slower than a direct connection.
</p>

To connect to the MySQL server with the Kubernetes API server:

1. Get the root password. The root user password is available in the Kubernetes Secret named after
  the TanzuMySQL instance suffixed with `-credentials`.

    ```
    MYSQL_ROOT_PASSWORD=$(kubectl get secret INSTANCE-NAME-credentials -o go-template='{{.data.rootPassword | base64decode}}')
    ```
    Where `INSTANCE-NAME` is the name of your instance.

1. Start a port-forwarding proxy with `kubectl port-forward`. For more information
about the command, see [Kubernetes documentation](https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#port-forward).

    ```
    kubectl port-forward service/INSTANCE-NAME 3306 &
    ```

    For example:

    <pre class="terminal">
    $ kubectl port-forward service/tanzumysql-sample 3306 &
    <br>Forwarding from 127.0.0.1:3306 -> 3306
    Forwarding from [::1]:3306 -> 3306
    </pre>

1. Connect to the service through the poxy port. For example, to connect with
the MySQL client:

    <pre class="terminal">
    $ mysql -h 127.0.0.1 -u root -P 3306 -p${MYSQL_ROOT_PASSWORD}
    </pre>

1. When you have finished with the connection, stop the proxy by stopping the kubectl process.

    For example:

    <pre class="terminal">
    $ jobs
    [1]+  Running    kubectl port-forward service/tanzumysql-sample 3306 & <br>
    $ kill %1
    </pre>

## <a id='app-connect'></a> Connect an App to the MySQL Server

<%= vars.product_short %> creates a Kubernetes Service that is used to connect apps to the database.
The name of the Service is the same as the name of the <%= vars.product_short %> instance.

If the app is deployed on the Kubernetes cluster, it can access the MySQL server using the DNS name
of the TanzuMySQL service.
This DNS name is only resolvable within the Kubernetes cluster.

To connect an app to the MySQL server:

1. If the app is deployed outside the Kubernetes cluster, enable the TanzuMySQL service to be
externally routable through a load balancer by following the
[Connect to the MySQL Server with an External IP](#off-platform-access) procedure above.

1. Log in to the MySQL server. See [Connect to the MySQL Server from within the Container](#server-login) above.

1. Create a database and user for the app to use.

1. Provide the DNS name of the <%= vars.product_short %> instance service to the app,
  along with the username and password created for the app user.

### <a id="example-bitnami-wordpress"></a> Example Deployment of Bitnami Wordpress with <%= vars.product_short %>

You can configure the Bitnami Wordpress Helm chart to connect to an external database
instead of deploying its own database. For more information about the Helm chart,
see [charts/bitnami/wordpress](https://github.com/bitnami/charts/tree/master/bitnami/wordpress) in
GitHub.

See the following example of setting up <%= vars.product_short %> with a database and user that you
can use with the Wordpress Helm chart:

<pre class="terminal">
$ kubectl exec -it tanzumysql-sample-0 -c mysql -- bash
mysql@tanzumysql-sample-0:/$ mysql -p$(cat $MYSQL_ROOT_PASSWORD_FILE) -u root
mysql> CREATE DATABASE bitnami_wordpress;
Query OK, 1 row affected (0.20 sec)

mysql> CREATE USER 'bn_wordpress'@'%' IDENTIFIED BY 'hunter2';
Query OK, 0 rows affected (0.08 sec)

mysql> GRANT ALL PRIVILEGES ON bitnami_wordpress.* TO 'bn_wordpress'@'%';
Query OK, 0 rows affected (0.03 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.10 sec)
</pre>

Next, the DNS name of the TanzuMySQL service is passed in to the chart as the value of
`externalDatabase.host`:

<pre class="terminal">
$ helm repo add bitnami https://charts.bitnami.com/bitnami
"bitnami" has been added to your repositories<br>
$ helm install wp bitnami/wordpress \
    --set mariadb.enabled=false \
    --set externalDatabase.host=tanzumysql-sample.default.svc.cluster.local \
    --set externalDatabase.password=hunter2
NAME: wp
LAST DEPLOYED: Tue Dec 8 14:32:08 2020
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
** Please be patient while the chart is being deployed **
...
</pre>

Retrieve the Wordpress user password by running:

```
kubectl get secret wp-wordpress -o go-template='{{index .data "wordpress-password" | base64decode}}'
```
