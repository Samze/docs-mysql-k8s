---
title: Installing the Tanzu SQL for Kubernetes Operator
owner: MySQL
---


This topic describes how Kubernetes admins install, configure, and deploy the Tanzu MySQL using two different methods, via the Tanzu Network Registry or a downloadable file. 


## <a id='tanzu-network-prerequisites'></a> Prerequisites 

Before you deploy the Tanzu MySQL Operator, you need:

- Access to [Tanzu Network](https://network.pivotal.io) and [Tanzu Network Registry](https://registry.tanzu.vmware.com/). You can use the same credentials for both sites.

- [Docker](https://github.com/docker) running and configured on your local computer, to access the Kubernetes cluster and Docker registry.

- A running Kubernetes cluster.

- The [kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/) command-line tool, configured and authenticated to communicate with your Kubernetes cluster.

- The Helm v3 command-line tool installed. For more information, see [Installing Helm](https://helm.sh/docs/intro/install/) from the Helm documentation. <br>
    <p class="note">
       <strong>Note:</strong> Helm 3.7.0 is not supported. Use Helm 3.7.1 and above, or Helm 3.6 and earlier.
    </p>

- `cluster-admin` ClusterRole access to the Kubernetes cluster. For more information, see the [Kubernetes documentation](https://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles).

- review the [Network Policies Configuration](network-policies.html) topic if you have any network plugins (for example [Network Plugin](https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/)) in your Kubernetes cluster.

* [Cert Manager](https://github.com/jetstack/cert-manager) installed on the Kubernetes cluster.
    
    Install cert-manager by running these commands from your local client:

    ``` 
    kubectl create namespace cert-manager
    helm repo add jetstack https://charts.jetstack.io
    helm repo update
    helm install cert-manager jetstack/cert-manager --namespace cert-manager  --version <1.latest> --set installCRDs=true
    ``` 
    where:
    - `--namespace cert-manager` is the namespace used for cert manager in the Kubernetes cluster
    - `--version <1.latest>` is the latest cert-manager version available (minimum above 1.0.2)
    - `--set installCRDs=true` ensures cert manager installs all types necessary to create certificates

    To verify the installation run:

    ``` 
    kubectl get all --namespace=cert-manager
    ``` 
    
    The output should be similar to:

    ```
    NAME                                           READY   STATUS    RESTARTS   AGE
    pod/cert-manager-57b65b7fc-x8vjt               1/1     Running   5          4d19h
    pod/cert-manager-cainjector-5f988f74c6-tgk25   1/1     Running   15         4d19h
    pod/cert-manager-webhook-7cf554f879-b5ss9      1/1     Running   4          4d19h

    NAME                           TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
    service/cert-manager           ClusterIP   10.106.253.7    <none>        9402/TCP   4d19h
    service/cert-manager-webhook   ClusterIP   10.108.17.113   <none>        443/TCP    4d19h

    NAME                                      READY   UP-TO-DATE   AVAILABLE   AGE
    deployment.apps/cert-manager              1/1     1            1           4d19h
    deployment.apps/cert-manager-cainjector   1/1     1            1           4d19h
    deployment.apps/cert-manager-webhook      1/1     1            1           4d19h

    NAME                                                 DESIRED   CURRENT   READY   AGE
    replicaset.apps/cert-manager-57b65b7fc               1         1         1       4d19h
    replicaset.apps/cert-manager-cainjector-5f988f74c6   1         1         1       4d19h
    replicaset.apps/cert-manager-webhook-7cf554f879      1         1         1       4d19h
    ```
    
    
    For security scenarios setup, see [Configuring TLS for MySQL Instances](configure-tls.html). 

## <a id="access"></a> Accessing the Resources

You can access and install <%=vars.product_name %> using two different methods: 

- Use [Setup the Tanzu MySQL Operator via Tanzu Network Registry](#install-via-tanzu) for a faster installation process, and if your server hosts have access to the internet.

- Use [Setup the Tanzu MySQL Operator via Downloadable Archive File](#install-via-tar) if your server hosts do not have access to the internet, or if you want to install from a private registry.

### <a id="install-via-tanzu"></a>  Setup the Tanzu Operator via the Tanzu Network Registry

1. Set the environment variable to enable OCI support in the Helm v3 client by running:

    ```
    export HELM_EXPERIMENTAL_OCI=1
    ```

    If you skip this step, the following error message might appear:
    ``` 
    Error: this feature has been marked as experimental and is not enabled by default.
    ``` 

1. Use Helm to log in to the Tanzu Network Registry by running:

    ```
    helm registry login registry.tanzu.vmware.com
    ```

    Follow the prompts to enter the email address and password for your <%= vars.product_network %> account. 


1. Download the Helm chart from the Tanzu Distribution Registry, and export into a local `/tmp/` directory:
    
    If you're using Helm CLI 3.6 and earlier:

    ```
    helm chart pull registry.tanzu.vmware.com/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart:1.5.0
    ```
    ```
    helm chart export registry.tanzu.vmware.com/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart:1.5.0 --destination=/tmp/
    ```

    If you're using Helm CLI 3.7.1 and later:
    ```
    helm pull oci://registry.tanzu.vmware.com/tanzu-mysql-for-kubernetes/tanzu-mysql-operator-chart --version 1.5.0 --untar --untardir /tmp
    ```

### <a id="install-via-tar"></a> Setup the Tanzu Operator via a Downloaded Archive File
        
Choose this method if:

- The installation destination (for example an air-gapped network) cannot access the [VMware Tanzu Network](https://network.pivotal.io).
- Or you wish to load the Operator and instance images to a private Docker registry.

**IMPORTANT**: Helm 3.7.0 is not supported. Use Helm 3.7.1 and above, or Helm 3.6 and earlier.

1. Download the Tanzu MySQL distribution from [VMware Tanzu Network](https://network.tanzu.vmware.com). The download filename has the format: `tanzu-mysql-for-kubernetes-<version>.tgz`.

1.  Unpack the downloaded software:

    ``` 
    cd ~/Downloads
    tar xzf tanzu-mysql-for-kubernetes-<version>.tgz
    ``` 

    This command unpacks the distribution into a new directory named `tanzu-mysql-for-kubernetes-<version>`, for example `tanzu-mysql-for-kubernetes-1.5.0`.

1.  Change to the new `tanzu-mysql-for-kubernetes-<version>` directory. For example:

    ``` 
    cd ./tanzu-mysql-for-kubernetes-<version>
    ``` 
    where <version> is the release you selected.

1.  Load the MySQL instance images to the Docker registry:

    ``` 
    docker load -i ./images/tanzu-mysql-instance-8.0.25
    docker load -i ./images/tanzu-mysql-instance-8.0.26
    docker load -i ./images/tanzu-mysql-instance-8.0.27
    ``` 

1.  Load the MySQL Operator image to the Docker registry:

    ``` 
    docker load -i ./images/tanzu-mysql-operator
    ``` 

1.  Verify that the four Docker images are now available.

    ``` 
    docker images
    ```
	```
	   REPOSITORY                                                                  	       TAG       IMAGE ID       CREATED        SIZE
	   registry.tanzu.vmware.com/tanzu-mysql-for-kubernetes/tanzu-mysql-instance-8.0.25    1.5.0     e8eb899f5df6   5 weeks ago    793MB
	   registry.tanzu.vmware.com/tanzu-mysql-for-kubernetes/tanzu-mysql-instance-8.0.26    1.5.0     110f35a9006d   5 weeks ago    842MB
	   registry.tanzu.vmware.com/tanzu-mysql-for-kubernetes/tanzu-mysql-instance-8.0.27    1.5.0     b2767c434c61   5 weeks ago    907MB
	   registry.tanzu.vmware.com/tanzu-mysql-for-kubernetes/tanzu-mysql-operator   	       1.5.0     8b46a4d26aa0   5 weeks ago    76.9MB
	```

1.  Push the Tanzu MySQL Docker images to the container registry of your choice. Set each image's project and image repo name, tag the images, and then push them using the Docker command `docker push`.

    This example tags and pushes the images to the Google Cloud Registry, using the default (core) project name for the example Google Cloud account.

    ```
    gcloud auth configure-docker

    PROJECT=$(gcloud config list core/project --format='value(core.project)')
    REGISTRY="gcr.io/${PROJECT}"

    INSTANCE_IMAGE_NAME="${REGISTRY}/tanzu-mysql-instance:$(cat ./images/tanzu-mysql-instance-8.0.25-tag)"
    docker tag $(cat ./images/tanzu-mysql-instance-8.0.25-id) ${INSTANCE_IMAGE_NAME}
    docker push ${INSTANCE_IMAGE_NAME}

    INSTANCE_IMAGE_NAME="${REGISTRY}/tanzu-mysql-instance:$(cat ./images/tanzu-mysql-instance-8.0.26-tag)"
    docker tag $(cat ./images/tanzu-mysql-instance-8.0.26-id) ${INSTANCE_IMAGE_NAME}
    docker push ${INSTANCE_IMAGE_NAME}

    INSTANCE_IMAGE_NAME="${REGISTRY}/tanzu-mysql-instance:$(cat ./images/tanzu-mysql-instance-8.0.27-tag)"
    docker tag $(cat ./images/tanzu-mysql-instance-8.0.27-id) ${INSTANCE_IMAGE_NAME}
    docker push ${INSTANCE_IMAGE_NAME}

    OPERATOR_IMAGE_NAME="${REGISTRY}/tanzu-mysql-operator:$(cat ./images/tanzu-mysql-operator-tag)"
    docker tag $(cat ./images/tanzu-mysql-operator-id) ${OPERATOR_IMAGE_NAME}
    docker push ${OPERATOR_IMAGE_NAME}
    ```

## <a id="installing_operator"></a>Installing the Operator

### <a id="create-namespace-and-secrets"></a>Create Operator Namespace and Secrets

1. Create the Operator namespace. By default this documentation
    uses namespace `tanzu-mysql-for-kubernetes-system`:

    ```
    kubectl create namespace tanzu-mysql-for-kubernetes-system
    ```

    To install your Operator into a different namespace, replace "tanzu-mysql-for-kubernetes-system"
    with your own namespace in the above command, and in all below commands which
    identify the Operator namespace via `--namespace tanzu-mysql-for-kubernetes-system`.

1. Create a `docker-registry` type secret to allow the Kubernetes cluster to authenticate with the private image registry, or the Tanzu Registry, so it can pull images. These examples create a secret named `tanzu-image-registry` using Tanzu Registry, Harbor, or GCR. The following commands create the secret in the default Operator namespace <code>tanzu-mysql-for-kubernetes-system</code> (created above).

    <p class='note important'><strong>IMPORTANT:</strong> Re-run the commands below to create identical or equivalent secrets in every namespace in which users will create Tanzu MySQL instances</strong>, and replace the Operator namespace <code>tanzu-mysql-for-kubernetes-system</code> by the instance namespace (e.g. <code>default</code>). </br>
    If these secrets are not created in the instance namespace, the users will receive "ImagePullBackOff" errors when creating instances, as their MySQL pods fail to pull instance images from the image registry.</p>
    
    **Tanzu Registry**
    
    ```
    
    kubectl create secret docker-registry tanzu-image-registry \
    --docker-server=https://registry.tanzu.vmware.com/ \
    --docker-username="${DOCKER_USERNAME}" \
    --docker-password="${DOCKER_PASSWORD}" \
    --namespace tanzu-mysql-for-kubernetes-system
    ```
    
    **Harbor**
    
    ```
    kubectl create secret docker-registry tanzu-image-registry \
    --docker-server=${HARBOR_URL} \
    --docker-username=${HARBOR_USER} \
    --docker-password="${HARBOR_PASSWORD}" \
    --namespace tanzu-mysql-for-kubernetes-system
    ```
    
    **GCR**
    
    ```
    kubectl create secret  docker-registry  tanzu-image-registry \
    --docker-server=https://gcr.io \
    --docker-username=_json_key \
    --docker-password="$(cat ~/key.json)" \
    --namespace tanzu-mysql-for-kubernetes-system
    ```

    For information about how to obtain the `key.json` service account file, see [Creating service account credentials](https://cloud.google.com/kubernetes-engine/docs/tutorials/authenticating-to-cloud-platform#step_3_create_service_account_credentials) in the GKE documentation.

    When you [deploy the operator](#create-operator), the MySQL Operator will use this secret to authenticate the Kubernetes cluster with the container registry and to then pull images.


### <a id="create-overrides"></a> Review the Operator Values

The below Operator configuration files are in the helm chart directory `tanzu-sql-with-mysql-operator`.

- If you setup the Tanzu Operator via Tanzu Network Registry, `tanzu-sql-with-mysql-operator` should be in the temporary `CHART_DIR` directory (created when you ran `helm chart export...`).

- If you setup the Tanzu Operator via a downloaded archive file, go to the directory of helm charts within the unpacked the archive file:

  ```
  cd tanzu-mysql-for-kubernetes-*/charts
  ```

  (or `cd charts` from within that unpacked archive file).

List the contents of the Operator helm chart directory `tanzu-sql-with-mysql-operator`:
```
ls -F tanzu-sql-with-mysql-operator
```
You should see it contains config files and subdirectories:
```
Chart.yaml      crds/      templates/      values.schema.json      values.yaml
```

In most situations, the default values supplied in the Operator configuration file `values.yaml` do not need to be changed.

However, you will need to create an Operator Values Override file to replace those values with your own if any of the following are true:

* You deployed the Tanzu SQL for Kubernetes images from a registry other than registry.tanzu.vmware.com.
* You named your registry secret something other than the default `tanzu-image-registry` in <strong>Create Operator Namespace and Secrets</strong> above.
* You want to allocate different CPU or memory resources for your Operator.
* You want to specify an alternate default version for new MySQL instances.

Create an Operator Values Override file:

1.  The file `values.yaml` specifies the location of the MySQL
    Operator and instance images. By default it contains the following values:
    
    ```
    ---
    imagePullSecretName: tanzu-image-registry
    operatorImage: registry.tanzu.vmware.com/tanzu-mysql-for-kubernetes/tanzu-mysql-operator:1.5.0
    registry: "registry.tanzu.vmware.com/tanzu-mysql-for-kubernetes/"
    resources: {}
    certManagerClusterIssuerName: ""
    ```

1.  Create a copy of `values.yaml` and name the new file `operator-values-overrides.yaml`. Save this file in the same directory as the `values.yaml` file. In this file, you can specify the custom container registry and secret. For manual changes, you may also set individual parameters using the `--set` flag on the command line. 

    See [Helm Values Files](https://helm.sh/docs/chart_template_guide/values_files/) in the Helm documentation for more information.

    If you are using a single node Minikube environment, it is not necessary to override the `operator/values.yaml` file because Minikube pulls the images from its local Docker registry.
    <br><br>
    Determine which values in the `values.yaml` file need to be changed for your environment. Use the table below as a guide.
    <table>
      <thead>
        <tr>
          <th width="35%">Key</th>
          <th width="10%">Value Type</th>
          <th width="55%">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code>imagePullSecret</code></td>
          <td>String</td>
          <td>Name of image pull secret. This value must match the name of the Kubernetes
            docker-registry type secret you created in <a href="#create-namespace-and-secrets">Create Operator Namespace and Secrets</a>.</td>
        </tr>
        <tr>
          <td><code>operatorImage</code></td>
          <td>URI</td>
          <td>Reference to the Tanzu MySQL Operator image.
            If you uploaded the Operator image to a private registry, you must
            change this reference to pull the Operator image from your registry.</td>
        </tr>
        <tr>
          <td><code>registry</code></td>
          <td>URI</td>
          <td>The registry from which to download Tanzu MySQL images.</td>
        </tr>
        <tr>
          <td><code>resources</code></td>
          <td>List</td>
          <td>Limits and requests for CPU and memory for the Tanzu MySQL Operator.
            You can change these values to scale your resources.</td>
        </tr>
        <tr>
            <td><code>certManagerClusterIssuerName</code></td>
            <td>String</td>
            <td>Name of any custom TLS issuer in Cert Manager, if you created one while configuring Cert Manager in the above
                Prerequisites. Details are in [Configuring a Custom TLS Issuer](configure-tls.html#configuring-a-custom-tls-issuer).</td>
        </tr>
      </tbody>
    </table>

1. Edit the values that you want to change.
1. Delete the sections of the file that you do not change.
1. Save the `operator-values-overrides.yaml` file in a location of your choice or the same directory as the `values.yaml` file. You will reference this file during upcoming deployment steps.


### <a id="create-operator"></a>  Deploy the Operator 

**IMPORTANT**: Helm 3.7.0 is not supported. Use Helm 3.7.1 and above, or Helm 3.6 and earlier.

1.  By default, the Tanzu MySQL Operator 1.3.0 configures a `ClusterIssuer` for issuing MySQL instance TLS certificates. Customers requiring a custom Certificate Authority for TLS, follow the Operator install steps in [Configuring a Custom TLS Issuer](configure-tls.html#configuring-custom-tls-issuer) in the _Configuring TLS for MySQL Instances_ page. 

    To continue with the default installation, use Helm to install the MySQL Operator in your Kubernetes cluster:

    ``` 
    helm install --wait my-mysql-operator /tmp/tanzu-sql-with-mysql-operator/
    ``` 

    where:
    * `--wait` flag waits for the Operator deployment to complete before any image installation starts
    * `my-mysql-operator` is the custom name you provide for your MySQL Operator
    * `tanzu-sql-with-mysql-operator/` is the location of the MySQL Operator helm chart
    *  `tanzu-mysql-for-kubernetes-system` is the Operator namespace you created in <strong>Create Operator Namespace and Secrets</strong> above.

    If you performed the above steps to <strong>Create an Operator Values Override file</strong>, add your override file to the command line:

    ``` 
    helm install --wait my-mysql-operator /tmp/tanzu-sql-with-mysql-operator/ \
      --values=operator-values-overrides.yaml \
      --namespace=mysql-for-kubernetes-system \
      --create-namespace
    ``` 

    The command displays a message similar to:

    ```
    NAME: my-mysql-operator
    LAST DEPLOYED: Wed Jun 16 13:28:05 2021
    NAMESPACE: tanzu-mysql-for-kubernetes-system
    STATUS: deployed
    REVISION: 1
    TEST SUITE: None
    ```
    
    **Note**: Your secrets must be created in the same namespace that you are installing your Operator into, as described in [Create Operator Namespace and Secrets](#create-namespace-and-secrets).

1.  Use `watch kubectl get all` to monitor the progress of the deployment. The deployment is complete when the MySQL Operator pod status changes to `Running`.

    ``` 
    watch kubectl get all --namespace=tanzu-mysql-for-kubernetes-system
    ``` 
    
    You may also check the logs to confirm the Operator is running properly:

    ``` 
    kubectl logs -l app=tanzu-mysql-operator
    ``` 
    
    Use the label `app=tanzu-mysql-operator` to search across resources created by the MySQL Operator Helm chart:

    ``` 
    kubectl get all -l app=tanzu-mysql-operator --namespace=tanzu-mysql-for-kubernetes-system
    ```

    The output would be similar to:

    ``` 
    NAME                                             READY       STATUS           RESTARTS      AGE
    pod/tanzu-mysql-operator-69765b8b74-rtms7        1/1         Running          0             6m
    NAME                                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
    service/tanzu-mysql-webhook-service   ClusterIP   10.97.127.198   none          443/TCP   6m
    NAME                                             READY       UP-TO-DATE       AVAILABLE     AGE
    deployment.apps/tanzu-mysql-operator             1/1         1                1             6m
    NAME                                             DESIRED     CURRENT          READY         AGE
    replicaset.apps/tanzu-mysql-operator-69765b8b74  1           1                1             6m
    ```

1. Clean up the temporary directory if the exported chart is no longer needed by running:
	```
	rm ${CHART_DIR}
	```

1. If you used an Operator values override file, consider saving it for future Operator upgrades reference. By default, Helm will re-apply those override values when you later use `helm upgrade`, unless you perform the upgrade with a different overrides file or with the `--reset-values` flag. For more details on Helm upgrades, see [Helm Upgrade](https://helm.sh/docs/helm/helm_upgrade/) in the Helm documentation.
